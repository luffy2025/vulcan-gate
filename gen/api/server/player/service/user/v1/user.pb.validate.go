// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: player/service/user/v1/user.proto

package servicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetByIdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetByIdRequestMultiError,
// or nil if none found.
func (m *GetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetByIdRequestMultiError(errors)
	}

	return nil
}

// GetByIdRequestMultiError is an error wrapping multiple validation errors
// returned by GetByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIdRequestMultiError) AllErrors() []error { return m }

// GetByIdRequestValidationError is the validation error returned by
// GetByIdRequest.Validate if the designated constraints aren't met.
type GetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIdRequestValidationError) ErrorName() string { return "GetByIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIdRequestValidationError{}

// Validate checks the field values on GetByIdResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByIdResponseMultiError, or nil if none found.
func (m *GetByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetByIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetByIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetByIdResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetByIdResponseMultiError(errors)
	}

	return nil
}

// GetByIdResponseMultiError is an error wrapping multiple validation errors
// returned by GetByIdResponse.ValidateAll() if the designated constraints
// aren't met.
type GetByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIdResponseMultiError) AllErrors() []error { return m }

// GetByIdResponseValidationError is the validation error returned by
// GetByIdResponse.Validate if the designated constraints aren't met.
type GetByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIdResponseValidationError) ErrorName() string { return "GetByIdResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIdResponseValidationError{}

// Validate checks the field values on UserListByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserListByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserListByIdRequestMultiError, or nil if none found.
func (m *UserListByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserListByIdRequestMultiError(errors)
	}

	return nil
}

// UserListByIdRequestMultiError is an error wrapping multiple validation
// errors returned by UserListByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type UserListByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListByIdRequestMultiError) AllErrors() []error { return m }

// UserListByIdRequestValidationError is the validation error returned by
// UserListByIdRequest.Validate if the designated constraints aren't met.
type UserListByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListByIdRequestValidationError) ErrorName() string {
	return "UserListByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserListByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListByIdRequestValidationError{}

// Validate checks the field values on UserListByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserListByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserListByIdResponseMultiError, or nil if none found.
func (m *UserListByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	{
		sorted_keys := make([]int64, len(m.GetUsers()))
		i := 0
		for key := range m.GetUsers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetUsers()[key]
			_ = val

			// no validation rules for Users[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UserListByIdResponseValidationError{
							field:  fmt.Sprintf("Users[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UserListByIdResponseValidationError{
							field:  fmt.Sprintf("Users[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UserListByIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return UserListByIdResponseMultiError(errors)
	}

	return nil
}

// UserListByIdResponseMultiError is an error wrapping multiple validation
// errors returned by UserListByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type UserListByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListByIdResponseMultiError) AllErrors() []error { return m }

// UserListByIdResponseValidationError is the validation error returned by
// UserListByIdResponse.Validate if the designated constraints aren't met.
type UserListByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListByIdResponseValidationError) ErrorName() string {
	return "UserListByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserListByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListByIdResponseValidationError{}

// Validate checks the field values on GetBasicByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBasicByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBasicByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBasicByIdRequestMultiError, or nil if none found.
func (m *GetBasicByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBasicByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBasicByIdRequestMultiError(errors)
	}

	return nil
}

// GetBasicByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetBasicByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBasicByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBasicByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBasicByIdRequestMultiError) AllErrors() []error { return m }

// GetBasicByIdRequestValidationError is the validation error returned by
// GetBasicByIdRequest.Validate if the designated constraints aren't met.
type GetBasicByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBasicByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBasicByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBasicByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBasicByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBasicByIdRequestValidationError) ErrorName() string {
	return "GetBasicByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBasicByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBasicByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBasicByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBasicByIdRequestValidationError{}

// Validate checks the field values on GetBasicByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBasicByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBasicByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBasicByIdResponseMultiError, or nil if none found.
func (m *GetBasicByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBasicByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBasicByIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBasicByIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBasicByIdResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBasicByIdResponseMultiError(errors)
	}

	return nil
}

// GetBasicByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetBasicByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBasicByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBasicByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBasicByIdResponseMultiError) AllErrors() []error { return m }

// GetBasicByIdResponseValidationError is the validation error returned by
// GetBasicByIdResponse.Validate if the designated constraints aren't met.
type GetBasicByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBasicByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBasicByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBasicByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBasicByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBasicByIdResponseValidationError) ErrorName() string {
	return "GetBasicByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBasicByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBasicByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBasicByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBasicByIdResponseValidationError{}

// Validate checks the field values on GetBasicListByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBasicListByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBasicListByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBasicListByIdRequestMultiError, or nil if none found.
func (m *GetBasicListByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBasicListByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetBasicListByIdRequestMultiError(errors)
	}

	return nil
}

// GetBasicListByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetBasicListByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBasicListByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBasicListByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBasicListByIdRequestMultiError) AllErrors() []error { return m }

// GetBasicListByIdRequestValidationError is the validation error returned by
// GetBasicListByIdRequest.Validate if the designated constraints aren't met.
type GetBasicListByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBasicListByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBasicListByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBasicListByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBasicListByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBasicListByIdRequestValidationError) ErrorName() string {
	return "GetBasicListByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBasicListByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBasicListByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBasicListByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBasicListByIdRequestValidationError{}

// Validate checks the field values on GetBasicListByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBasicListByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBasicListByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBasicListByIdResponseMultiError, or nil if none found.
func (m *GetBasicListByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBasicListByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	{
		sorted_keys := make([]int64, len(m.GetUsers()))
		i := 0
		for key := range m.GetUsers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetUsers()[key]
			_ = val

			// no validation rules for Users[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetBasicListByIdResponseValidationError{
							field:  fmt.Sprintf("Users[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetBasicListByIdResponseValidationError{
							field:  fmt.Sprintf("Users[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetBasicListByIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetBasicListByIdResponseMultiError(errors)
	}

	return nil
}

// GetBasicListByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetBasicListByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBasicListByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBasicListByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBasicListByIdResponseMultiError) AllErrors() []error { return m }

// GetBasicListByIdResponseValidationError is the validation error returned by
// GetBasicListByIdResponse.Validate if the designated constraints aren't met.
type GetBasicListByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBasicListByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBasicListByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBasicListByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBasicListByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBasicListByIdResponseValidationError) ErrorName() string {
	return "GetBasicListByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBasicListByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBasicListByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBasicListByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBasicListByIdResponseValidationError{}

// Validate checks the field values on UserCacheProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserCacheProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCacheProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserCacheProtoMultiError,
// or nil if none found.
func (m *UserCacheProto) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCacheProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBasic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserCacheProtoValidationError{
					field:  "Basic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserCacheProtoValidationError{
					field:  "Basic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBasic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserCacheProtoValidationError{
				field:  "Basic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserCacheProtoMultiError(errors)
	}

	return nil
}

// UserCacheProtoMultiError is an error wrapping multiple validation errors
// returned by UserCacheProto.ValidateAll() if the designated constraints
// aren't met.
type UserCacheProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCacheProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCacheProtoMultiError) AllErrors() []error { return m }

// UserCacheProtoValidationError is the validation error returned by
// UserCacheProto.Validate if the designated constraints aren't met.
type UserCacheProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCacheProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCacheProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCacheProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCacheProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCacheProtoValidationError) ErrorName() string { return "UserCacheProtoValidationError" }

// Error satisfies the builtin error interface
func (e UserCacheProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCacheProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCacheProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCacheProtoValidationError{}

// Validate checks the field values on UserBasicCacheProto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserBasicCacheProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBasicCacheProto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserBasicCacheProtoMultiError, or nil if none found.
func (m *UserBasicCacheProto) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBasicCacheProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IdStr

	// no validation rules for Account

	// no validation rules for Name

	// no validation rules for CreatedTime

	// no validation rules for LoginTime

	// no validation rules for LastOnlineTime

	// no validation rules for LastOnlineIp

	// no validation rules for Detail

	if len(errors) > 0 {
		return UserBasicCacheProtoMultiError(errors)
	}

	return nil
}

// UserBasicCacheProtoMultiError is an error wrapping multiple validation
// errors returned by UserBasicCacheProto.ValidateAll() if the designated
// constraints aren't met.
type UserBasicCacheProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBasicCacheProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBasicCacheProtoMultiError) AllErrors() []error { return m }

// UserBasicCacheProtoValidationError is the validation error returned by
// UserBasicCacheProto.Validate if the designated constraints aren't met.
type UserBasicCacheProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBasicCacheProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBasicCacheProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBasicCacheProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBasicCacheProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBasicCacheProtoValidationError) ErrorName() string {
	return "UserBasicCacheProtoValidationError"
}

// Error satisfies the builtin error interface
func (e UserBasicCacheProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBasicCacheProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBasicCacheProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBasicCacheProtoValidationError{}
