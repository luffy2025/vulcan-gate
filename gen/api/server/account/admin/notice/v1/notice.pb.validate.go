// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account/admin/notice/v1/notice.proto

package adminv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetNoticeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNoticeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoticeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNoticeListRequestMultiError, or nil if none found.
func (m *GetNoticeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoticeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetNoticeListRequestMultiError(errors)
	}

	return nil
}

// GetNoticeListRequestMultiError is an error wrapping multiple validation
// errors returned by GetNoticeListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNoticeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoticeListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoticeListRequestMultiError) AllErrors() []error { return m }

// GetNoticeListRequestValidationError is the validation error returned by
// GetNoticeListRequest.Validate if the designated constraints aren't met.
type GetNoticeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoticeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoticeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoticeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoticeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoticeListRequestValidationError) ErrorName() string {
	return "GetNoticeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNoticeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoticeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoticeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoticeListRequestValidationError{}

// Validate checks the field values on GetNoticeListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNoticeListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoticeListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNoticeListResponseMultiError, or nil if none found.
func (m *GetNoticeListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoticeListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNoticeListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNoticeListResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNoticeListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetNoticeListResponseMultiError(errors)
	}

	return nil
}

// GetNoticeListResponseMultiError is an error wrapping multiple validation
// errors returned by GetNoticeListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNoticeListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoticeListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoticeListResponseMultiError) AllErrors() []error { return m }

// GetNoticeListResponseValidationError is the validation error returned by
// GetNoticeListResponse.Validate if the designated constraints aren't met.
type GetNoticeListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoticeListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoticeListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoticeListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoticeListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoticeListResponseValidationError) ErrorName() string {
	return "GetNoticeListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNoticeListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoticeListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoticeListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoticeListResponseValidationError{}

// Validate checks the field values on GetNoticeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNoticeByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoticeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNoticeByIdRequestMultiError, or nil if none found.
func (m *GetNoticeByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoticeByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetNoticeByIdRequestMultiError(errors)
	}

	return nil
}

// GetNoticeByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetNoticeByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNoticeByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoticeByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoticeByIdRequestMultiError) AllErrors() []error { return m }

// GetNoticeByIdRequestValidationError is the validation error returned by
// GetNoticeByIdRequest.Validate if the designated constraints aren't met.
type GetNoticeByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoticeByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoticeByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoticeByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoticeByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoticeByIdRequestValidationError) ErrorName() string {
	return "GetNoticeByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNoticeByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoticeByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoticeByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoticeByIdRequestValidationError{}

// Validate checks the field values on GetNoticeByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNoticeByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoticeByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNoticeByIdResponseMultiError, or nil if none found.
func (m *GetNoticeByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoticeByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNoticeByIdResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNoticeByIdResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNoticeByIdResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNoticeByIdResponseMultiError(errors)
	}

	return nil
}

// GetNoticeByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetNoticeByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNoticeByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoticeByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoticeByIdResponseMultiError) AllErrors() []error { return m }

// GetNoticeByIdResponseValidationError is the validation error returned by
// GetNoticeByIdResponse.Validate if the designated constraints aren't met.
type GetNoticeByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoticeByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoticeByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoticeByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoticeByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoticeByIdResponseValidationError) ErrorName() string {
	return "GetNoticeByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNoticeByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoticeByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoticeByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoticeByIdResponseValidationError{}

// Validate checks the field values on CreateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNoticeRequestMultiError, or nil if none found.
func (m *CreateNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNoticeRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNoticeRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNoticeRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNoticeRequestMultiError(errors)
	}

	return nil
}

// CreateNoticeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNoticeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNoticeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNoticeRequestMultiError) AllErrors() []error { return m }

// CreateNoticeRequestValidationError is the validation error returned by
// CreateNoticeRequest.Validate if the designated constraints aren't met.
type CreateNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoticeRequestValidationError) ErrorName() string {
	return "CreateNoticeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoticeRequestValidationError{}

// Validate checks the field values on CreateNoticeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNoticeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNoticeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNoticeResponseMultiError, or nil if none found.
func (m *CreateNoticeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNoticeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateNoticeResponseMultiError(errors)
	}

	return nil
}

// CreateNoticeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateNoticeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateNoticeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNoticeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNoticeResponseMultiError) AllErrors() []error { return m }

// CreateNoticeResponseValidationError is the validation error returned by
// CreateNoticeResponse.Validate if the designated constraints aren't met.
type CreateNoticeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoticeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoticeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoticeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoticeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoticeResponseValidationError) ErrorName() string {
	return "CreateNoticeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoticeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoticeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoticeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoticeResponseValidationError{}

// Validate checks the field values on UpdateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNoticeRequestMultiError, or nil if none found.
func (m *UpdateNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNoticeRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNoticeRequestValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNoticeRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNoticeRequestMultiError(errors)
	}

	return nil
}

// UpdateNoticeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNoticeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNoticeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNoticeRequestMultiError) AllErrors() []error { return m }

// UpdateNoticeRequestValidationError is the validation error returned by
// UpdateNoticeRequest.Validate if the designated constraints aren't met.
type UpdateNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoticeRequestValidationError) ErrorName() string {
	return "UpdateNoticeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoticeRequestValidationError{}

// Validate checks the field values on UpdateNoticeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNoticeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNoticeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNoticeResponseMultiError, or nil if none found.
func (m *UpdateNoticeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNoticeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateNoticeResponseMultiError(errors)
	}

	return nil
}

// UpdateNoticeResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateNoticeResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNoticeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNoticeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNoticeResponseMultiError) AllErrors() []error { return m }

// UpdateNoticeResponseValidationError is the validation error returned by
// UpdateNoticeResponse.Validate if the designated constraints aren't met.
type UpdateNoticeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoticeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoticeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoticeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoticeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoticeResponseValidationError) ErrorName() string {
	return "UpdateNoticeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoticeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoticeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoticeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoticeResponseValidationError{}

// Validate checks the field values on DeleteNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNoticeRequestMultiError, or nil if none found.
func (m *DeleteNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteNoticeRequestMultiError(errors)
	}

	return nil
}

// DeleteNoticeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNoticeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNoticeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNoticeRequestMultiError) AllErrors() []error { return m }

// DeleteNoticeRequestValidationError is the validation error returned by
// DeleteNoticeRequest.Validate if the designated constraints aren't met.
type DeleteNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNoticeRequestValidationError) ErrorName() string {
	return "DeleteNoticeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNoticeRequestValidationError{}

// Validate checks the field values on DeleteNoticeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNoticeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNoticeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNoticeResponseMultiError, or nil if none found.
func (m *DeleteNoticeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNoticeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteNoticeResponseMultiError(errors)
	}

	return nil
}

// DeleteNoticeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteNoticeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteNoticeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNoticeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNoticeResponseMultiError) AllErrors() []error { return m }

// DeleteNoticeResponseValidationError is the validation error returned by
// DeleteNoticeResponse.Validate if the designated constraints aren't met.
type DeleteNoticeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNoticeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNoticeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNoticeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNoticeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNoticeResponseValidationError) ErrorName() string {
	return "DeleteNoticeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNoticeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNoticeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNoticeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNoticeResponseValidationError{}

// Validate checks the field values on NoticeProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NoticeProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoticeProto with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NoticeProtoMultiError, or
// nil if none found.
func (m *NoticeProto) ValidateAll() error {
	return m.validate(true)
}

func (m *NoticeProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Sort

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for CreatedTime

	// no validation rules for UpdatedTime

	if len(errors) > 0 {
		return NoticeProtoMultiError(errors)
	}

	return nil
}

// NoticeProtoMultiError is an error wrapping multiple validation errors
// returned by NoticeProto.ValidateAll() if the designated constraints aren't met.
type NoticeProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoticeProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoticeProtoMultiError) AllErrors() []error { return m }

// NoticeProtoValidationError is the validation error returned by
// NoticeProto.Validate if the designated constraints aren't met.
type NoticeProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoticeProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoticeProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoticeProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoticeProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoticeProtoValidationError) ErrorName() string { return "NoticeProtoValidationError" }

// Error satisfies the builtin error interface
func (e NoticeProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoticeProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoticeProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoticeProtoValidationError{}
