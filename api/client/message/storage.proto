syntax = "proto3";

package message;

import "google/api/annotations.proto";


option go_package = "api/client/message;climsg";


// Storage service
service StorageTCPService {

  // Use pack
  rpc UsePack (CSUsePack) returns (SCUsePack) {
    option (google.api.http) = {
      post: "/storage/use/pack"
      body: "*"
    };
  };

}

// ---------- Push messages ----------

// Push: Item has been updated
message SCPushItemUpdate {
  map<int64, uint64> items = 1; // Items with updates<item config ID, current amount>. 0 means the item has been deleted
}

// ---------- Request messages ----------

// Request: Use pack
message CSUsePack {
  int64 id = 1; // Pack ID
}

// Response: Use pack
message SCUsePack {
  Code code = 1;
  enum Code {
    ErrServer = 0; // Please try again later
    Success = 1; // Success
    ErrItemNotExist = 2; // Item does not exist
    ErrItemLimit = 3; // Usage restricted
  }
  int64 id = 2; // Item ID
  map<int64, uint64> changed_items = 3; // Items with updates<item config ID, current amount>. 0 means the item has been deleted
}

// ---------- Data structures ----------

// Storage
message UserStorageProto {
  map<int64, uint64> amounts = 1; // Numeric items<item config ID, amount>
  map<int64, ItemPackProto> packs = 2; // Packs<pack ID, amount>
  map<int64, ItemRecoverableProto> recoverable_items = 3; // Recoverable items<config ID, properties>
}

// Pack structure
message ItemPackProto {
  int64 data_id = 1; // Pack DataID
  int64 received_at = 2; // Received time
}

// Recoverable numeric properties
message ItemRecoverableProto {
  uint64 count = 1; // Current amount
  uint64 max = 2; // Maximum
  float recover_per_second = 3; // Recovery speed, n/s
  int64 updated_at = 4; // Last updated timestamp, unit: second
}
