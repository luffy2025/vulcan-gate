// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: message/hero.proto

package climsg

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHeroTCPServiceHeroLevelUpgrade = "/message.HeroTCPService/HeroLevelUpgrade"

type HeroTCPServiceHTTPServer interface {
	// HeroLevelUpgrade Hero level upgrade
	HeroLevelUpgrade(context.Context, *CSHeroLevelUpgrade) (*SCHeroLevelUpgrade, error)
}

func RegisterHeroTCPServiceHTTPServer(s *http.Server, srv HeroTCPServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/hero/level/upgrade", _HeroTCPService_HeroLevelUpgrade0_HTTP_Handler(srv))
}

func _HeroTCPService_HeroLevelUpgrade0_HTTP_Handler(srv HeroTCPServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CSHeroLevelUpgrade
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHeroTCPServiceHeroLevelUpgrade)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HeroLevelUpgrade(ctx, req.(*CSHeroLevelUpgrade))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SCHeroLevelUpgrade)
		return ctx.Result(200, reply)
	}
}

type HeroTCPServiceHTTPClient interface {
	HeroLevelUpgrade(ctx context.Context, req *CSHeroLevelUpgrade, opts ...http.CallOption) (rsp *SCHeroLevelUpgrade, err error)
}

type HeroTCPServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewHeroTCPServiceHTTPClient(client *http.Client) HeroTCPServiceHTTPClient {
	return &HeroTCPServiceHTTPClientImpl{client}
}

func (c *HeroTCPServiceHTTPClientImpl) HeroLevelUpgrade(ctx context.Context, in *CSHeroLevelUpgrade, opts ...http.CallOption) (*SCHeroLevelUpgrade, error) {
	var out SCHeroLevelUpgrade
	pattern := "/hero/level/upgrade"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHeroTCPServiceHeroLevelUpgrade))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
