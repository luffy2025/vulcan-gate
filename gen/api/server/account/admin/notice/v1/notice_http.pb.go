// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: account/admin/notice/v1/notice.proto

package adminv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNoticeAdminCreateNotice = "/account.admin.notice.v1.NoticeAdmin/CreateNotice"
const OperationNoticeAdminDeleteNotice = "/account.admin.notice.v1.NoticeAdmin/DeleteNotice"
const OperationNoticeAdminGetNoticeById = "/account.admin.notice.v1.NoticeAdmin/GetNoticeById"
const OperationNoticeAdminGetNoticeList = "/account.admin.notice.v1.NoticeAdmin/GetNoticeList"
const OperationNoticeAdminUpdateNotice = "/account.admin.notice.v1.NoticeAdmin/UpdateNotice"

type NoticeAdminHTTPServer interface {
	// CreateNotice Create notice
	CreateNotice(context.Context, *CreateNoticeRequest) (*CreateNoticeResponse, error)
	// DeleteNotice Delete notice
	DeleteNotice(context.Context, *DeleteNoticeRequest) (*DeleteNoticeResponse, error)
	// GetNoticeById Query notice by id
	GetNoticeById(context.Context, *GetNoticeByIdRequest) (*GetNoticeByIdResponse, error)
	// GetNoticeList Query notice page list
	GetNoticeList(context.Context, *GetNoticeListRequest) (*GetNoticeListResponse, error)
	// UpdateNotice Update notice
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*UpdateNoticeResponse, error)
}

func RegisterNoticeAdminHTTPServer(s *http.Server, srv NoticeAdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/notice/list", _NoticeAdmin_GetNoticeList0_HTTP_Handler(srv))
	r.GET("/admin/notice/id", _NoticeAdmin_GetNoticeById0_HTTP_Handler(srv))
	r.POST("/admin/notice/create", _NoticeAdmin_CreateNotice0_HTTP_Handler(srv))
	r.POST("/admin/notice/update", _NoticeAdmin_UpdateNotice0_HTTP_Handler(srv))
	r.POST("/admin/notice/delete", _NoticeAdmin_DeleteNotice0_HTTP_Handler(srv))
}

func _NoticeAdmin_GetNoticeList0_HTTP_Handler(srv NoticeAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNoticeListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeAdminGetNoticeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNoticeList(ctx, req.(*GetNoticeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNoticeListResponse)
		return ctx.Result(200, reply)
	}
}

func _NoticeAdmin_GetNoticeById0_HTTP_Handler(srv NoticeAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNoticeByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeAdminGetNoticeById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNoticeById(ctx, req.(*GetNoticeByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNoticeByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _NoticeAdmin_CreateNotice0_HTTP_Handler(srv NoticeAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateNoticeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeAdminCreateNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNotice(ctx, req.(*CreateNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNoticeResponse)
		return ctx.Result(200, reply)
	}
}

func _NoticeAdmin_UpdateNotice0_HTTP_Handler(srv NoticeAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNoticeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeAdminUpdateNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNotice(ctx, req.(*UpdateNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateNoticeResponse)
		return ctx.Result(200, reply)
	}
}

func _NoticeAdmin_DeleteNotice0_HTTP_Handler(srv NoticeAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNoticeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeAdminDeleteNotice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNotice(ctx, req.(*DeleteNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNoticeResponse)
		return ctx.Result(200, reply)
	}
}

type NoticeAdminHTTPClient interface {
	CreateNotice(ctx context.Context, req *CreateNoticeRequest, opts ...http.CallOption) (rsp *CreateNoticeResponse, err error)
	DeleteNotice(ctx context.Context, req *DeleteNoticeRequest, opts ...http.CallOption) (rsp *DeleteNoticeResponse, err error)
	GetNoticeById(ctx context.Context, req *GetNoticeByIdRequest, opts ...http.CallOption) (rsp *GetNoticeByIdResponse, err error)
	GetNoticeList(ctx context.Context, req *GetNoticeListRequest, opts ...http.CallOption) (rsp *GetNoticeListResponse, err error)
	UpdateNotice(ctx context.Context, req *UpdateNoticeRequest, opts ...http.CallOption) (rsp *UpdateNoticeResponse, err error)
}

type NoticeAdminHTTPClientImpl struct {
	cc *http.Client
}

func NewNoticeAdminHTTPClient(client *http.Client) NoticeAdminHTTPClient {
	return &NoticeAdminHTTPClientImpl{client}
}

func (c *NoticeAdminHTTPClientImpl) CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...http.CallOption) (*CreateNoticeResponse, error) {
	var out CreateNoticeResponse
	pattern := "/admin/notice/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNoticeAdminCreateNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NoticeAdminHTTPClientImpl) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...http.CallOption) (*DeleteNoticeResponse, error) {
	var out DeleteNoticeResponse
	pattern := "/admin/notice/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNoticeAdminDeleteNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NoticeAdminHTTPClientImpl) GetNoticeById(ctx context.Context, in *GetNoticeByIdRequest, opts ...http.CallOption) (*GetNoticeByIdResponse, error) {
	var out GetNoticeByIdResponse
	pattern := "/admin/notice/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoticeAdminGetNoticeById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NoticeAdminHTTPClientImpl) GetNoticeList(ctx context.Context, in *GetNoticeListRequest, opts ...http.CallOption) (*GetNoticeListResponse, error) {
	var out GetNoticeListResponse
	pattern := "/admin/notice/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoticeAdminGetNoticeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NoticeAdminHTTPClientImpl) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...http.CallOption) (*UpdateNoticeResponse, error) {
	var out UpdateNoticeResponse
	pattern := "/admin/notice/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNoticeAdminUpdateNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
