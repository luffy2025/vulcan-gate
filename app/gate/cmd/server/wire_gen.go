// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/vulcan-frame/vulcan-gate/app/gate/internal/client"
	"github.com/vulcan-frame/vulcan-gate/app/gate/internal/client/player"
	"github.com/vulcan-frame/vulcan-gate/app/gate/internal/client/room"
	"github.com/vulcan-frame/vulcan-gate/app/gate/internal/conf"
	"github.com/vulcan-frame/vulcan-gate/app/gate/internal/data"
	"github.com/vulcan-frame/vulcan-gate/app/gate/internal/intra/net/service"
	"github.com/vulcan-frame/vulcan-gate/app/gate/internal/router"
	"github.com/vulcan-frame/vulcan-gate/app/gate/internal/server"
	"github.com/vulcan-frame/vulcan-gate/app/gate/internal/service/push/v1"
	"github.com/vulcan-frame/vulcan-gate/pkg/net/health"
)

// Injectors from wire.go:

func initApp(confServer *conf.Server, label *conf.Label, registry *conf.Registry, confData *conf.Data, logger log.Logger, healthServer *health.Server) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData)
	if err != nil {
		return nil, nil, err
	}
	routeTable := router.NewRouteTable(dataData)
	playerRouteTable := player.NewRouteTable(dataData)
	discovery, err := client.NewDiscovery(registry)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	conn, err := player.NewConn(logger, playerRouteTable, discovery)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	tunnelServiceClient := player.NewClient(conn)
	roomRouteTable := room.NewRouteTable(dataData)
	roomConn, err := room.NewConn(logger, roomRouteTable, discovery)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	intrav1TunnelServiceClient := room.NewClient(roomConn)
	serviceService := service.NewTCPService(logger, label, playerRouteTable, tunnelServiceClient, roomRouteTable, intrav1TunnelServiceClient)
	tcpServer, err := server.NewTCPServer(confServer, logger, routeTable, serviceService)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	pushServiceServer := v1.NewPushService(logger, tcpServer)
	httpServer := server.NewHTTPServer(confServer, logger, pushServiceServer)
	grpcServer := server.NewGRPCServer(confServer, logger, pushServiceServer)
	registrar, err := server.NewRegistrar(registry)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app := newApp(logger, tcpServer, httpServer, grpcServer, healthServer, label, registrar)
	return app, func() {
		cleanup()
	}, nil
}
