// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message/dev.proto

package climsg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CSDevList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSDevList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSDevList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSDevListMultiError, or nil
// if none found.
func (m *CSDevList) ValidateAll() error {
	return m.validate(true)
}

func (m *CSDevList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CSDevListMultiError(errors)
	}

	return nil
}

// CSDevListMultiError is an error wrapping multiple validation errors returned
// by CSDevList.ValidateAll() if the designated constraints aren't met.
type CSDevListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSDevListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSDevListMultiError) AllErrors() []error { return m }

// CSDevListValidationError is the validation error returned by
// CSDevList.Validate if the designated constraints aren't met.
type CSDevListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSDevListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSDevListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSDevListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSDevListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSDevListValidationError) ErrorName() string { return "CSDevListValidationError" }

// Error satisfies the builtin error interface
func (e CSDevListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSDevList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSDevListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSDevListValidationError{}

// Validate checks the field values on SCDevList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCDevList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCDevList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCDevListMultiError, or nil
// if none found.
func (m *SCDevList) ValidateAll() error {
	return m.validate(true)
}

func (m *SCDevList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	for idx, item := range m.GetCommands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SCDevListValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SCDevListValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SCDevListValidationError{
					field:  fmt.Sprintf("Commands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SCDevListMultiError(errors)
	}

	return nil
}

// SCDevListMultiError is an error wrapping multiple validation errors returned
// by SCDevList.ValidateAll() if the designated constraints aren't met.
type SCDevListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCDevListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCDevListMultiError) AllErrors() []error { return m }

// SCDevListValidationError is the validation error returned by
// SCDevList.Validate if the designated constraints aren't met.
type SCDevListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCDevListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCDevListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCDevListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCDevListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCDevListValidationError) ErrorName() string { return "SCDevListValidationError" }

// Error satisfies the builtin error interface
func (e SCDevListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCDevList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCDevListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCDevListValidationError{}

// Validate checks the field values on CSDevExecute with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSDevExecute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSDevExecute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSDevExecuteMultiError, or
// nil if none found.
func (m *CSDevExecute) ValidateAll() error {
	return m.validate(true)
}

func (m *CSDevExecute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mod

	// no validation rules for Cmd

	// no validation rules for StrArgs

	if len(errors) > 0 {
		return CSDevExecuteMultiError(errors)
	}

	return nil
}

// CSDevExecuteMultiError is an error wrapping multiple validation errors
// returned by CSDevExecute.ValidateAll() if the designated constraints aren't met.
type CSDevExecuteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSDevExecuteMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSDevExecuteMultiError) AllErrors() []error { return m }

// CSDevExecuteValidationError is the validation error returned by
// CSDevExecute.Validate if the designated constraints aren't met.
type CSDevExecuteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSDevExecuteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSDevExecuteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSDevExecuteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSDevExecuteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSDevExecuteValidationError) ErrorName() string { return "CSDevExecuteValidationError" }

// Error satisfies the builtin error interface
func (e CSDevExecuteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSDevExecute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSDevExecuteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSDevExecuteValidationError{}

// Validate checks the field values on SCDevExecute with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCDevExecute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCDevExecute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCDevExecuteMultiError, or
// nil if none found.
func (m *SCDevExecute) ValidateAll() error {
	return m.validate(true)
}

func (m *SCDevExecute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return SCDevExecuteMultiError(errors)
	}

	return nil
}

// SCDevExecuteMultiError is an error wrapping multiple validation errors
// returned by SCDevExecute.ValidateAll() if the designated constraints aren't met.
type SCDevExecuteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCDevExecuteMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCDevExecuteMultiError) AllErrors() []error { return m }

// SCDevExecuteValidationError is the validation error returned by
// SCDevExecute.Validate if the designated constraints aren't met.
type SCDevExecuteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCDevExecuteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCDevExecuteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCDevExecuteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCDevExecuteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCDevExecuteValidationError) ErrorName() string { return "SCDevExecuteValidationError" }

// Error satisfies the builtin error interface
func (e SCDevExecuteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCDevExecute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCDevExecuteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCDevExecuteValidationError{}

// Validate checks the field values on DevCmdProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DevCmdProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevCmdProto with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DevCmdProtoMultiError, or
// nil if none found.
func (m *DevCmdProto) ValidateAll() error {
	return m.validate(true)
}

func (m *DevCmdProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mod

	// no validation rules for Name

	// no validation rules for Desc

	for idx, item := range m.GetArgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DevCmdProtoValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DevCmdProtoValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DevCmdProtoValidationError{
					field:  fmt.Sprintf("Args[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DevCmdProtoMultiError(errors)
	}

	return nil
}

// DevCmdProtoMultiError is an error wrapping multiple validation errors
// returned by DevCmdProto.ValidateAll() if the designated constraints aren't met.
type DevCmdProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevCmdProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevCmdProtoMultiError) AllErrors() []error { return m }

// DevCmdProtoValidationError is the validation error returned by
// DevCmdProto.Validate if the designated constraints aren't met.
type DevCmdProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevCmdProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevCmdProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevCmdProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevCmdProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevCmdProtoValidationError) ErrorName() string { return "DevCmdProtoValidationError" }

// Error satisfies the builtin error interface
func (e DevCmdProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevCmdProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevCmdProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevCmdProtoValidationError{}

// Validate checks the field values on DevCmdArgProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DevCmdArgProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevCmdArgProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DevCmdArgProtoMultiError,
// or nil if none found.
func (m *DevCmdArgProto) ValidateAll() error {
	return m.validate(true)
}

func (m *DevCmdArgProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Def

	if len(errors) > 0 {
		return DevCmdArgProtoMultiError(errors)
	}

	return nil
}

// DevCmdArgProtoMultiError is an error wrapping multiple validation errors
// returned by DevCmdArgProto.ValidateAll() if the designated constraints
// aren't met.
type DevCmdArgProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevCmdArgProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevCmdArgProtoMultiError) AllErrors() []error { return m }

// DevCmdArgProtoValidationError is the validation error returned by
// DevCmdArgProto.Validate if the designated constraints aren't met.
type DevCmdArgProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevCmdArgProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevCmdArgProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevCmdArgProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevCmdArgProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevCmdArgProtoValidationError) ErrorName() string { return "DevCmdArgProtoValidationError" }

// Error satisfies the builtin error interface
func (e DevCmdArgProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevCmdArgProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevCmdArgProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevCmdArgProtoValidationError{}
