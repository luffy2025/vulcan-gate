// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: account/interface/v1/account.proto

package interfacev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountInterface_DevPing_FullMethodName            = "/account.interface.v1.AccountInterface/DevPing"
	AccountInterface_Register_FullMethodName           = "/account.interface.v1.AccountInterface/Register"
	AccountInterface_Login_FullMethodName              = "/account.interface.v1.AccountInterface/Login"
	AccountInterface_Refresh_FullMethodName            = "/account.interface.v1.AccountInterface/Refresh"
	AccountInterface_Token_FullMethodName              = "/account.interface.v1.AccountInterface/Token"
	AccountInterface_AppleLogin_FullMethodName         = "/account.interface.v1.AccountInterface/AppleLogin"
	AccountInterface_AppleLoginCallback_FullMethodName = "/account.interface.v1.AccountInterface/AppleLoginCallback"
	AccountInterface_GoogleLogin_FullMethodName        = "/account.interface.v1.AccountInterface/GoogleLogin"
	AccountInterface_FacebookLogin_FullMethodName      = "/account.interface.v1.AccountInterface/FacebookLogin"
)

// AccountInterfaceClient is the client API for AccountInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Account service
// Open to public network
// Provide HTTP and gRPC interfaces
type AccountInterfaceClient interface {
	// Connection test
	DevPing(ctx context.Context, in *DevPingRequest, opts ...grpc.CallOption) (*DevPingResponse, error)
	// Register
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Login
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Session renewal
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Get TCP handshake token
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// Apple login
	AppleLogin(ctx context.Context, in *AppleLoginRequest, opts ...grpc.CallOption) (*AppleLoginResponse, error)
	// Apple login callback
	AppleLoginCallback(ctx context.Context, in *AppleLoginCallbackRequest, opts ...grpc.CallOption) (*AppleLoginCallbackResponse, error)
	// Google login
	GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...grpc.CallOption) (*GoogleLoginResponse, error)
	// Facebook login
	FacebookLogin(ctx context.Context, in *FacebookLoginRequest, opts ...grpc.CallOption) (*FacebookLoginResponse, error)
}

type accountInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountInterfaceClient(cc grpc.ClientConnInterface) AccountInterfaceClient {
	return &accountInterfaceClient{cc}
}

func (c *accountInterfaceClient) DevPing(ctx context.Context, in *DevPingRequest, opts ...grpc.CallOption) (*DevPingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DevPingResponse)
	err := c.cc.Invoke(ctx, AccountInterface_DevPing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInterfaceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AccountInterface_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInterfaceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AccountInterface_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInterfaceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, AccountInterface_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInterfaceClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, AccountInterface_Token_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInterfaceClient) AppleLogin(ctx context.Context, in *AppleLoginRequest, opts ...grpc.CallOption) (*AppleLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppleLoginResponse)
	err := c.cc.Invoke(ctx, AccountInterface_AppleLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInterfaceClient) AppleLoginCallback(ctx context.Context, in *AppleLoginCallbackRequest, opts ...grpc.CallOption) (*AppleLoginCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppleLoginCallbackResponse)
	err := c.cc.Invoke(ctx, AccountInterface_AppleLoginCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInterfaceClient) GoogleLogin(ctx context.Context, in *GoogleLoginRequest, opts ...grpc.CallOption) (*GoogleLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoogleLoginResponse)
	err := c.cc.Invoke(ctx, AccountInterface_GoogleLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInterfaceClient) FacebookLogin(ctx context.Context, in *FacebookLoginRequest, opts ...grpc.CallOption) (*FacebookLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FacebookLoginResponse)
	err := c.cc.Invoke(ctx, AccountInterface_FacebookLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountInterfaceServer is the server API for AccountInterface service.
// All implementations must embed UnimplementedAccountInterfaceServer
// for forward compatibility.
//
// Account service
// Open to public network
// Provide HTTP and gRPC interfaces
type AccountInterfaceServer interface {
	// Connection test
	DevPing(context.Context, *DevPingRequest) (*DevPingResponse, error)
	// Register
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Login
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Session renewal
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Get TCP handshake token
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	// Apple login
	AppleLogin(context.Context, *AppleLoginRequest) (*AppleLoginResponse, error)
	// Apple login callback
	AppleLoginCallback(context.Context, *AppleLoginCallbackRequest) (*AppleLoginCallbackResponse, error)
	// Google login
	GoogleLogin(context.Context, *GoogleLoginRequest) (*GoogleLoginResponse, error)
	// Facebook login
	FacebookLogin(context.Context, *FacebookLoginRequest) (*FacebookLoginResponse, error)
	mustEmbedUnimplementedAccountInterfaceServer()
}

// UnimplementedAccountInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountInterfaceServer struct{}

func (UnimplementedAccountInterfaceServer) DevPing(context.Context, *DevPingRequest) (*DevPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevPing not implemented")
}
func (UnimplementedAccountInterfaceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAccountInterfaceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAccountInterfaceServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAccountInterfaceServer) Token(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedAccountInterfaceServer) AppleLogin(context.Context, *AppleLoginRequest) (*AppleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppleLogin not implemented")
}
func (UnimplementedAccountInterfaceServer) AppleLoginCallback(context.Context, *AppleLoginCallbackRequest) (*AppleLoginCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppleLoginCallback not implemented")
}
func (UnimplementedAccountInterfaceServer) GoogleLogin(context.Context, *GoogleLoginRequest) (*GoogleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleLogin not implemented")
}
func (UnimplementedAccountInterfaceServer) FacebookLogin(context.Context, *FacebookLoginRequest) (*FacebookLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FacebookLogin not implemented")
}
func (UnimplementedAccountInterfaceServer) mustEmbedUnimplementedAccountInterfaceServer() {}
func (UnimplementedAccountInterfaceServer) testEmbeddedByValue()                          {}

// UnsafeAccountInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountInterfaceServer will
// result in compilation errors.
type UnsafeAccountInterfaceServer interface {
	mustEmbedUnimplementedAccountInterfaceServer()
}

func RegisterAccountInterfaceServer(s grpc.ServiceRegistrar, srv AccountInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedAccountInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountInterface_ServiceDesc, srv)
}

func _AccountInterface_DevPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInterfaceServer).DevPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInterface_DevPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInterfaceServer).DevPing(ctx, req.(*DevPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInterface_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInterfaceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInterface_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInterfaceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInterface_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInterfaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInterface_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInterfaceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInterface_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInterfaceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInterface_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInterfaceServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInterface_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInterfaceServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInterface_Token_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInterfaceServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInterface_AppleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInterfaceServer).AppleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInterface_AppleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInterfaceServer).AppleLogin(ctx, req.(*AppleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInterface_AppleLoginCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppleLoginCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInterfaceServer).AppleLoginCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInterface_AppleLoginCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInterfaceServer).AppleLoginCallback(ctx, req.(*AppleLoginCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInterface_GoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInterfaceServer).GoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInterface_GoogleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInterfaceServer).GoogleLogin(ctx, req.(*GoogleLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInterface_FacebookLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FacebookLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInterfaceServer).FacebookLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInterface_FacebookLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInterfaceServer).FacebookLogin(ctx, req.(*FacebookLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountInterface_ServiceDesc is the grpc.ServiceDesc for AccountInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.interface.v1.AccountInterface",
	HandlerType: (*AccountInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DevPing",
			Handler:    _AccountInterface_DevPing_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AccountInterface_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AccountInterface_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _AccountInterface_Refresh_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _AccountInterface_Token_Handler,
		},
		{
			MethodName: "AppleLogin",
			Handler:    _AccountInterface_AppleLogin_Handler,
		},
		{
			MethodName: "AppleLoginCallback",
			Handler:    _AccountInterface_AppleLoginCallback_Handler,
		},
		{
			MethodName: "GoogleLogin",
			Handler:    _AccountInterface_GoogleLogin_Handler,
		},
		{
			MethodName: "FacebookLogin",
			Handler:    _AccountInterface_FacebookLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/interface/v1/account.proto",
}
