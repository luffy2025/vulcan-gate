// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: account/admin/account/v1/account.proto

package adminv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAccountAdminAccountList = "/account.admin.account.v1.AccountAdmin/AccountList"
const OperationAccountAdminGetById = "/account.admin.account.v1.AccountAdmin/GetById"

type AccountAdminHTTPServer interface {
	AccountList(context.Context, *AccountListRequest) (*AccountListResponse, error)
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
}

func RegisterAccountAdminHTTPServer(s *http.Server, srv AccountAdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/account/list", _AccountAdmin_AccountList0_HTTP_Handler(srv))
	r.GET("/admin/account/id", _AccountAdmin_GetById0_HTTP_Handler(srv))
}

func _AccountAdmin_AccountList0_HTTP_Handler(srv AccountAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountAdminAccountList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AccountList(ctx, req.(*AccountListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountListResponse)
		return ctx.Result(200, reply)
	}
}

func _AccountAdmin_GetById0_HTTP_Handler(srv AccountAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountAdminGetById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetById(ctx, req.(*GetByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetByIdResponse)
		return ctx.Result(200, reply)
	}
}

type AccountAdminHTTPClient interface {
	AccountList(ctx context.Context, req *AccountListRequest, opts ...http.CallOption) (rsp *AccountListResponse, err error)
	GetById(ctx context.Context, req *GetByIdRequest, opts ...http.CallOption) (rsp *GetByIdResponse, err error)
}

type AccountAdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountAdminHTTPClient(client *http.Client) AccountAdminHTTPClient {
	return &AccountAdminHTTPClientImpl{client}
}

func (c *AccountAdminHTTPClientImpl) AccountList(ctx context.Context, in *AccountListRequest, opts ...http.CallOption) (*AccountListResponse, error) {
	var out AccountListResponse
	pattern := "/admin/account/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountAdminAccountList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountAdminHTTPClientImpl) GetById(ctx context.Context, in *GetByIdRequest, opts ...http.CallOption) (*GetByIdResponse, error) {
	var out GetByIdResponse
	pattern := "/admin/account/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountAdminGetById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
