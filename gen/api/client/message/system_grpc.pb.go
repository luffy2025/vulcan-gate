// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: message/system.proto

package climsg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemTCPService_HeartBeat_FullMethodName = "/message.SystemTCPService/HeartBeat"
)

// SystemTCPServiceClient is the client API for SystemTCPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// System service
type SystemTCPServiceClient interface {
	HeartBeat(ctx context.Context, in *CSHeartBeat, opts ...grpc.CallOption) (*SCHeartBeat, error)
}

type systemTCPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemTCPServiceClient(cc grpc.ClientConnInterface) SystemTCPServiceClient {
	return &systemTCPServiceClient{cc}
}

func (c *systemTCPServiceClient) HeartBeat(ctx context.Context, in *CSHeartBeat, opts ...grpc.CallOption) (*SCHeartBeat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCHeartBeat)
	err := c.cc.Invoke(ctx, SystemTCPService_HeartBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemTCPServiceServer is the server API for SystemTCPService service.
// All implementations must embed UnimplementedSystemTCPServiceServer
// for forward compatibility.
//
// System service
type SystemTCPServiceServer interface {
	HeartBeat(context.Context, *CSHeartBeat) (*SCHeartBeat, error)
	mustEmbedUnimplementedSystemTCPServiceServer()
}

// UnimplementedSystemTCPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemTCPServiceServer struct{}

func (UnimplementedSystemTCPServiceServer) HeartBeat(context.Context, *CSHeartBeat) (*SCHeartBeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedSystemTCPServiceServer) mustEmbedUnimplementedSystemTCPServiceServer() {}
func (UnimplementedSystemTCPServiceServer) testEmbeddedByValue()                          {}

// UnsafeSystemTCPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemTCPServiceServer will
// result in compilation errors.
type UnsafeSystemTCPServiceServer interface {
	mustEmbedUnimplementedSystemTCPServiceServer()
}

func RegisterSystemTCPServiceServer(s grpc.ServiceRegistrar, srv SystemTCPServiceServer) {
	// If the following call pancis, it indicates UnimplementedSystemTCPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemTCPService_ServiceDesc, srv)
}

func _SystemTCPService_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSHeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemTCPServiceServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemTCPService_HeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemTCPServiceServer).HeartBeat(ctx, req.(*CSHeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemTCPService_ServiceDesc is the grpc.ServiceDesc for SystemTCPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemTCPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.SystemTCPService",
	HandlerType: (*SystemTCPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _SystemTCPService_HeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/system.proto",
}
