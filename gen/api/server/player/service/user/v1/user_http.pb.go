// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: player/service/user/v1/user.proto

package servicev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserServiceGetBasicById = "/player.service.user.v1.UserService/GetBasicById"
const OperationUserServiceGetBasicListById = "/player.service.user.v1.UserService/GetBasicListById"
const OperationUserServiceGetById = "/player.service.user.v1.UserService/GetById"
const OperationUserServiceUserListById = "/player.service.user.v1.UserService/UserListById"

type UserServiceHTTPServer interface {
	// GetBasicById Get player basic data cache by id
	GetBasicById(context.Context, *GetBasicByIdRequest) (*GetBasicByIdResponse, error)
	// GetBasicListById Get player basic data cache list by id list
	GetBasicListById(context.Context, *GetBasicListByIdRequest) (*GetBasicListByIdResponse, error)
	// GetById Get player data cache by id
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	// UserListById Get player data cache list by id list
	UserListById(context.Context, *UserListByIdRequest) (*UserListByIdResponse, error)
}

func RegisterUserServiceHTTPServer(s *http.Server, srv UserServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/service/user/id", _UserService_GetById0_HTTP_Handler(srv))
	r.GET("/service/user/basic/id", _UserService_GetBasicById0_HTTP_Handler(srv))
	r.GET("/service/user/list/id", _UserService_UserListById0_HTTP_Handler(srv))
	r.GET("/service/user/basic/list/id", _UserService_GetBasicListById0_HTTP_Handler(srv))
}

func _UserService_GetById0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetById(ctx, req.(*GetByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _UserService_GetBasicById0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBasicByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetBasicById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBasicById(ctx, req.(*GetBasicByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBasicByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _UserService_UserListById0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserListByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceUserListById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserListById(ctx, req.(*UserListByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserListByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _UserService_GetBasicListById0_HTTP_Handler(srv UserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBasicListByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserServiceGetBasicListById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBasicListById(ctx, req.(*GetBasicListByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBasicListByIdResponse)
		return ctx.Result(200, reply)
	}
}

type UserServiceHTTPClient interface {
	GetBasicById(ctx context.Context, req *GetBasicByIdRequest, opts ...http.CallOption) (rsp *GetBasicByIdResponse, err error)
	GetBasicListById(ctx context.Context, req *GetBasicListByIdRequest, opts ...http.CallOption) (rsp *GetBasicListByIdResponse, err error)
	GetById(ctx context.Context, req *GetByIdRequest, opts ...http.CallOption) (rsp *GetByIdResponse, err error)
	UserListById(ctx context.Context, req *UserListByIdRequest, opts ...http.CallOption) (rsp *UserListByIdResponse, err error)
}

type UserServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserServiceHTTPClient(client *http.Client) UserServiceHTTPClient {
	return &UserServiceHTTPClientImpl{client}
}

func (c *UserServiceHTTPClientImpl) GetBasicById(ctx context.Context, in *GetBasicByIdRequest, opts ...http.CallOption) (*GetBasicByIdResponse, error) {
	var out GetBasicByIdResponse
	pattern := "/service/user/basic/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetBasicById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) GetBasicListById(ctx context.Context, in *GetBasicListByIdRequest, opts ...http.CallOption) (*GetBasicListByIdResponse, error) {
	var out GetBasicListByIdResponse
	pattern := "/service/user/basic/list/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetBasicListById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) GetById(ctx context.Context, in *GetByIdRequest, opts ...http.CallOption) (*GetByIdResponse, error) {
	var out GetByIdResponse
	pattern := "/service/user/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceGetById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserServiceHTTPClientImpl) UserListById(ctx context.Context, in *UserListByIdRequest, opts ...http.CallOption) (*UserListByIdResponse, error) {
	var out UserListByIdResponse
	pattern := "/service/user/list/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserServiceUserListById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
