// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: message/dev.proto

package climsg

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDevTCPServiceDevExecute = "/message.DevTCPService/DevExecute"
const OperationDevTCPServiceDevList = "/message.DevTCPService/DevList"

type DevTCPServiceHTTPServer interface {
	// DevExecute Execute Dev command
	DevExecute(context.Context, *CSDevExecute) (*SCDevExecute, error)
	// DevList Dev command list
	DevList(context.Context, *CSDevList) (*SCDevList, error)
}

func RegisterDevTCPServiceHTTPServer(s *http.Server, srv DevTCPServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/dev/list", _DevTCPService_DevList0_HTTP_Handler(srv))
	r.POST("/dev/execute", _DevTCPService_DevExecute0_HTTP_Handler(srv))
}

func _DevTCPService_DevList0_HTTP_Handler(srv DevTCPServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CSDevList
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDevTCPServiceDevList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DevList(ctx, req.(*CSDevList))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SCDevList)
		return ctx.Result(200, reply)
	}
}

func _DevTCPService_DevExecute0_HTTP_Handler(srv DevTCPServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CSDevExecute
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDevTCPServiceDevExecute)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DevExecute(ctx, req.(*CSDevExecute))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SCDevExecute)
		return ctx.Result(200, reply)
	}
}

type DevTCPServiceHTTPClient interface {
	DevExecute(ctx context.Context, req *CSDevExecute, opts ...http.CallOption) (rsp *SCDevExecute, err error)
	DevList(ctx context.Context, req *CSDevList, opts ...http.CallOption) (rsp *SCDevList, err error)
}

type DevTCPServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewDevTCPServiceHTTPClient(client *http.Client) DevTCPServiceHTTPClient {
	return &DevTCPServiceHTTPClientImpl{client}
}

func (c *DevTCPServiceHTTPClientImpl) DevExecute(ctx context.Context, in *CSDevExecute, opts ...http.CallOption) (*SCDevExecute, error) {
	var out SCDevExecute
	pattern := "/dev/execute"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDevTCPServiceDevExecute))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DevTCPServiceHTTPClientImpl) DevList(ctx context.Context, in *CSDevList, opts ...http.CallOption) (*SCDevList, error) {
	var out SCDevList
	pattern := "/dev/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDevTCPServiceDevList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
