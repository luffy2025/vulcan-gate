// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message/room.proto

package climsg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserRoomProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRoomProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRoomProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRoomProtoMultiError, or
// nil if none found.
func (m *UserRoomProto) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRoomProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return UserRoomProtoMultiError(errors)
	}

	return nil
}

// UserRoomProtoMultiError is an error wrapping multiple validation errors
// returned by UserRoomProto.ValidateAll() if the designated constraints
// aren't met.
type UserRoomProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRoomProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRoomProtoMultiError) AllErrors() []error { return m }

// UserRoomProtoValidationError is the validation error returned by
// UserRoomProto.Validate if the designated constraints aren't met.
type UserRoomProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRoomProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRoomProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRoomProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRoomProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRoomProtoValidationError) ErrorName() string { return "UserRoomProtoValidationError" }

// Error satisfies the builtin error interface
func (e UserRoomProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRoomProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRoomProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRoomProtoValidationError{}

// Validate checks the field values on RoomProto with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomProto with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomProtoMultiError, or nil
// if none found.
func (m *RoomProto) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBasic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomProtoValidationError{
					field:  "Basic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomProtoValidationError{
					field:  "Basic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBasic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomProtoValidationError{
				field:  "Basic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]int64, len(m.GetMembers()))
		i := 0
		for key := range m.GetMembers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMembers()[key]
			_ = val

			// no validation rules for Members[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RoomProtoValidationError{
							field:  fmt.Sprintf("Members[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RoomProtoValidationError{
							field:  fmt.Sprintf("Members[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RoomProtoValidationError{
						field:  fmt.Sprintf("Members[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return RoomProtoMultiError(errors)
	}

	return nil
}

// RoomProtoMultiError is an error wrapping multiple validation errors returned
// by RoomProto.ValidateAll() if the designated constraints aren't met.
type RoomProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomProtoMultiError) AllErrors() []error { return m }

// RoomProtoValidationError is the validation error returned by
// RoomProto.Validate if the designated constraints aren't met.
type RoomProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomProtoValidationError) ErrorName() string { return "RoomProtoValidationError" }

// Error satisfies the builtin error interface
func (e RoomProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomProtoValidationError{}

// Validate checks the field values on RoomBasicProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomBasicProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomBasicProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomBasicProtoMultiError,
// or nil if none found.
func (m *RoomBasicProto) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomBasicProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoomType

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomBasicProtoValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomBasicProtoValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomBasicProtoValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return RoomBasicProtoMultiError(errors)
	}

	return nil
}

// RoomBasicProtoMultiError is an error wrapping multiple validation errors
// returned by RoomBasicProto.ValidateAll() if the designated constraints
// aren't met.
type RoomBasicProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomBasicProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomBasicProtoMultiError) AllErrors() []error { return m }

// RoomBasicProtoValidationError is the validation error returned by
// RoomBasicProto.Validate if the designated constraints aren't met.
type RoomBasicProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomBasicProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomBasicProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomBasicProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomBasicProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomBasicProtoValidationError) ErrorName() string { return "RoomBasicProtoValidationError" }

// Error satisfies the builtin error interface
func (e RoomBasicProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomBasicProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomBasicProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomBasicProtoValidationError{}

// Validate checks the field values on RoomMemberProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomMemberProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomMemberProto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomMemberProtoMultiError, or nil if none found.
func (m *RoomMemberProto) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomMemberProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomMemberProtoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomMemberProtoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomMemberProtoValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for JoinedAt

	if len(errors) > 0 {
		return RoomMemberProtoMultiError(errors)
	}

	return nil
}

// RoomMemberProtoMultiError is an error wrapping multiple validation errors
// returned by RoomMemberProto.ValidateAll() if the designated constraints
// aren't met.
type RoomMemberProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomMemberProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomMemberProtoMultiError) AllErrors() []error { return m }

// RoomMemberProtoValidationError is the validation error returned by
// RoomMemberProto.Validate if the designated constraints aren't met.
type RoomMemberProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomMemberProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomMemberProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomMemberProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomMemberProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomMemberProtoValidationError) ErrorName() string { return "RoomMemberProtoValidationError" }

// Error satisfies the builtin error interface
func (e RoomMemberProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomMemberProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomMemberProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomMemberProtoValidationError{}

// Validate checks the field values on SCPushJoinedRoom with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SCPushJoinedRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCPushJoinedRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SCPushJoinedRoomMultiError, or nil if none found.
func (m *SCPushJoinedRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *SCPushJoinedRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SCPushJoinedRoomValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SCPushJoinedRoomValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SCPushJoinedRoomValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SCPushJoinedRoomMultiError(errors)
	}

	return nil
}

// SCPushJoinedRoomMultiError is an error wrapping multiple validation errors
// returned by SCPushJoinedRoom.ValidateAll() if the designated constraints
// aren't met.
type SCPushJoinedRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCPushJoinedRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCPushJoinedRoomMultiError) AllErrors() []error { return m }

// SCPushJoinedRoomValidationError is the validation error returned by
// SCPushJoinedRoom.Validate if the designated constraints aren't met.
type SCPushJoinedRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCPushJoinedRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCPushJoinedRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCPushJoinedRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCPushJoinedRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCPushJoinedRoomValidationError) ErrorName() string { return "SCPushJoinedRoomValidationError" }

// Error satisfies the builtin error interface
func (e SCPushJoinedRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCPushJoinedRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCPushJoinedRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCPushJoinedRoomValidationError{}

// Validate checks the field values on SCPushRemovedFromRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SCPushRemovedFromRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCPushRemovedFromRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SCPushRemovedFromRoomMultiError, or nil if none found.
func (m *SCPushRemovedFromRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *SCPushRemovedFromRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SCPushRemovedFromRoomValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SCPushRemovedFromRoomValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SCPushRemovedFromRoomValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SCPushRemovedFromRoomMultiError(errors)
	}

	return nil
}

// SCPushRemovedFromRoomMultiError is an error wrapping multiple validation
// errors returned by SCPushRemovedFromRoom.ValidateAll() if the designated
// constraints aren't met.
type SCPushRemovedFromRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCPushRemovedFromRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCPushRemovedFromRoomMultiError) AllErrors() []error { return m }

// SCPushRemovedFromRoomValidationError is the validation error returned by
// SCPushRemovedFromRoom.Validate if the designated constraints aren't met.
type SCPushRemovedFromRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCPushRemovedFromRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCPushRemovedFromRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCPushRemovedFromRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCPushRemovedFromRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCPushRemovedFromRoomValidationError) ErrorName() string {
	return "SCPushRemovedFromRoomValidationError"
}

// Error satisfies the builtin error interface
func (e SCPushRemovedFromRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCPushRemovedFromRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCPushRemovedFromRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCPushRemovedFromRoomValidationError{}

// Validate checks the field values on CSRoomList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSRoomList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSRoomList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSRoomListMultiError, or
// nil if none found.
func (m *CSRoomList) ValidateAll() error {
	return m.validate(true)
}

func (m *CSRoomList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return CSRoomListMultiError(errors)
	}

	return nil
}

// CSRoomListMultiError is an error wrapping multiple validation errors
// returned by CSRoomList.ValidateAll() if the designated constraints aren't met.
type CSRoomListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSRoomListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSRoomListMultiError) AllErrors() []error { return m }

// CSRoomListValidationError is the validation error returned by
// CSRoomList.Validate if the designated constraints aren't met.
type CSRoomListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSRoomListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSRoomListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSRoomListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSRoomListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSRoomListValidationError) ErrorName() string { return "CSRoomListValidationError" }

// Error satisfies the builtin error interface
func (e CSRoomListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSRoomList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSRoomListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSRoomListValidationError{}

// Validate checks the field values on SCRoomList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCRoomList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCRoomList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCRoomListMultiError, or
// nil if none found.
func (m *SCRoomList) ValidateAll() error {
	return m.validate(true)
}

func (m *SCRoomList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SCRoomListValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SCRoomListValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SCRoomListValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SCRoomListMultiError(errors)
	}

	return nil
}

// SCRoomListMultiError is an error wrapping multiple validation errors
// returned by SCRoomList.ValidateAll() if the designated constraints aren't met.
type SCRoomListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCRoomListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCRoomListMultiError) AllErrors() []error { return m }

// SCRoomListValidationError is the validation error returned by
// SCRoomList.Validate if the designated constraints aren't met.
type SCRoomListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCRoomListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCRoomListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCRoomListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCRoomListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCRoomListValidationError) ErrorName() string { return "SCRoomListValidationError" }

// Error satisfies the builtin error interface
func (e SCRoomListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCRoomList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCRoomListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCRoomListValidationError{}

// Validate checks the field values on CSRoomDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSRoomDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSRoomDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSRoomDetailMultiError, or
// nil if none found.
func (m *CSRoomDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *CSRoomDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return CSRoomDetailMultiError(errors)
	}

	return nil
}

// CSRoomDetailMultiError is an error wrapping multiple validation errors
// returned by CSRoomDetail.ValidateAll() if the designated constraints aren't met.
type CSRoomDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSRoomDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSRoomDetailMultiError) AllErrors() []error { return m }

// CSRoomDetailValidationError is the validation error returned by
// CSRoomDetail.Validate if the designated constraints aren't met.
type CSRoomDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSRoomDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSRoomDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSRoomDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSRoomDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSRoomDetailValidationError) ErrorName() string { return "CSRoomDetailValidationError" }

// Error satisfies the builtin error interface
func (e CSRoomDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSRoomDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSRoomDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSRoomDetailValidationError{}

// Validate checks the field values on SCRoomDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCRoomDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCRoomDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCRoomDetailMultiError, or
// nil if none found.
func (m *SCRoomDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *SCRoomDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SCRoomDetailValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SCRoomDetailValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SCRoomDetailValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SCRoomDetailMultiError(errors)
	}

	return nil
}

// SCRoomDetailMultiError is an error wrapping multiple validation errors
// returned by SCRoomDetail.ValidateAll() if the designated constraints aren't met.
type SCRoomDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCRoomDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCRoomDetailMultiError) AllErrors() []error { return m }

// SCRoomDetailValidationError is the validation error returned by
// SCRoomDetail.Validate if the designated constraints aren't met.
type SCRoomDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCRoomDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCRoomDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCRoomDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCRoomDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCRoomDetailValidationError) ErrorName() string { return "SCRoomDetailValidationError" }

// Error satisfies the builtin error interface
func (e SCRoomDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCRoomDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCRoomDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCRoomDetailValidationError{}

// Validate checks the field values on CSCreateRoom with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSCreateRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSCreateRoom with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSCreateRoomMultiError, or
// nil if none found.
func (m *CSCreateRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *CSCreateRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomType

	if len(errors) > 0 {
		return CSCreateRoomMultiError(errors)
	}

	return nil
}

// CSCreateRoomMultiError is an error wrapping multiple validation errors
// returned by CSCreateRoom.ValidateAll() if the designated constraints aren't met.
type CSCreateRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSCreateRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSCreateRoomMultiError) AllErrors() []error { return m }

// CSCreateRoomValidationError is the validation error returned by
// CSCreateRoom.Validate if the designated constraints aren't met.
type CSCreateRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSCreateRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSCreateRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSCreateRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSCreateRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSCreateRoomValidationError) ErrorName() string { return "CSCreateRoomValidationError" }

// Error satisfies the builtin error interface
func (e CSCreateRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSCreateRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSCreateRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSCreateRoomValidationError{}

// Validate checks the field values on SCCreateRoom with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCCreateRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCCreateRoom with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCCreateRoomMultiError, or
// nil if none found.
func (m *SCCreateRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *SCCreateRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SCCreateRoomValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SCCreateRoomValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SCCreateRoomValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SCCreateRoomMultiError(errors)
	}

	return nil
}

// SCCreateRoomMultiError is an error wrapping multiple validation errors
// returned by SCCreateRoom.ValidateAll() if the designated constraints aren't met.
type SCCreateRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCCreateRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCCreateRoomMultiError) AllErrors() []error { return m }

// SCCreateRoomValidationError is the validation error returned by
// SCCreateRoom.Validate if the designated constraints aren't met.
type SCCreateRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCCreateRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCCreateRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCCreateRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCCreateRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCCreateRoomValidationError) ErrorName() string { return "SCCreateRoomValidationError" }

// Error satisfies the builtin error interface
func (e SCCreateRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCCreateRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCCreateRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCCreateRoomValidationError{}

// Validate checks the field values on CSInviteToJoinRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CSInviteToJoinRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSInviteToJoinRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CSInviteToJoinRoomMultiError, or nil if none found.
func (m *CSInviteToJoinRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *CSInviteToJoinRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CSInviteToJoinRoomMultiError(errors)
	}

	return nil
}

// CSInviteToJoinRoomMultiError is an error wrapping multiple validation errors
// returned by CSInviteToJoinRoom.ValidateAll() if the designated constraints
// aren't met.
type CSInviteToJoinRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSInviteToJoinRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSInviteToJoinRoomMultiError) AllErrors() []error { return m }

// CSInviteToJoinRoomValidationError is the validation error returned by
// CSInviteToJoinRoom.Validate if the designated constraints aren't met.
type CSInviteToJoinRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSInviteToJoinRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSInviteToJoinRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSInviteToJoinRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSInviteToJoinRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSInviteToJoinRoomValidationError) ErrorName() string {
	return "CSInviteToJoinRoomValidationError"
}

// Error satisfies the builtin error interface
func (e CSInviteToJoinRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSInviteToJoinRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSInviteToJoinRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSInviteToJoinRoomValidationError{}

// Validate checks the field values on SCInviteToJoinRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SCInviteToJoinRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCInviteToJoinRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SCInviteToJoinRoomMultiError, or nil if none found.
func (m *SCInviteToJoinRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *SCInviteToJoinRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SCInviteToJoinRoomMultiError(errors)
	}

	return nil
}

// SCInviteToJoinRoomMultiError is an error wrapping multiple validation errors
// returned by SCInviteToJoinRoom.ValidateAll() if the designated constraints
// aren't met.
type SCInviteToJoinRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCInviteToJoinRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCInviteToJoinRoomMultiError) AllErrors() []error { return m }

// SCInviteToJoinRoomValidationError is the validation error returned by
// SCInviteToJoinRoom.Validate if the designated constraints aren't met.
type SCInviteToJoinRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCInviteToJoinRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCInviteToJoinRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCInviteToJoinRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCInviteToJoinRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCInviteToJoinRoomValidationError) ErrorName() string {
	return "SCInviteToJoinRoomValidationError"
}

// Error satisfies the builtin error interface
func (e SCInviteToJoinRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCInviteToJoinRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCInviteToJoinRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCInviteToJoinRoomValidationError{}

// Validate checks the field values on CSAgreeToInviteJoinRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CSAgreeToInviteJoinRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSAgreeToInviteJoinRoom with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CSAgreeToInviteJoinRoomMultiError, or nil if none found.
func (m *CSAgreeToInviteJoinRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *CSAgreeToInviteJoinRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return CSAgreeToInviteJoinRoomMultiError(errors)
	}

	return nil
}

// CSAgreeToInviteJoinRoomMultiError is an error wrapping multiple validation
// errors returned by CSAgreeToInviteJoinRoom.ValidateAll() if the designated
// constraints aren't met.
type CSAgreeToInviteJoinRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSAgreeToInviteJoinRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSAgreeToInviteJoinRoomMultiError) AllErrors() []error { return m }

// CSAgreeToInviteJoinRoomValidationError is the validation error returned by
// CSAgreeToInviteJoinRoom.Validate if the designated constraints aren't met.
type CSAgreeToInviteJoinRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSAgreeToInviteJoinRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSAgreeToInviteJoinRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSAgreeToInviteJoinRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSAgreeToInviteJoinRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSAgreeToInviteJoinRoomValidationError) ErrorName() string {
	return "CSAgreeToInviteJoinRoomValidationError"
}

// Error satisfies the builtin error interface
func (e CSAgreeToInviteJoinRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSAgreeToInviteJoinRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSAgreeToInviteJoinRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSAgreeToInviteJoinRoomValidationError{}

// Validate checks the field values on SCAgreeToInviteJoinRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SCAgreeToInviteJoinRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCAgreeToInviteJoinRoom with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SCAgreeToInviteJoinRoomMultiError, or nil if none found.
func (m *SCAgreeToInviteJoinRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *SCAgreeToInviteJoinRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SCAgreeToInviteJoinRoomMultiError(errors)
	}

	return nil
}

// SCAgreeToInviteJoinRoomMultiError is an error wrapping multiple validation
// errors returned by SCAgreeToInviteJoinRoom.ValidateAll() if the designated
// constraints aren't met.
type SCAgreeToInviteJoinRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCAgreeToInviteJoinRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCAgreeToInviteJoinRoomMultiError) AllErrors() []error { return m }

// SCAgreeToInviteJoinRoomValidationError is the validation error returned by
// SCAgreeToInviteJoinRoom.Validate if the designated constraints aren't met.
type SCAgreeToInviteJoinRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCAgreeToInviteJoinRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCAgreeToInviteJoinRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCAgreeToInviteJoinRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCAgreeToInviteJoinRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCAgreeToInviteJoinRoomValidationError) ErrorName() string {
	return "SCAgreeToInviteJoinRoomValidationError"
}

// Error satisfies the builtin error interface
func (e SCAgreeToInviteJoinRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCAgreeToInviteJoinRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCAgreeToInviteJoinRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCAgreeToInviteJoinRoomValidationError{}

// Validate checks the field values on CSRequestToJoinRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CSRequestToJoinRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSRequestToJoinRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CSRequestToJoinRoomMultiError, or nil if none found.
func (m *CSRequestToJoinRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *CSRequestToJoinRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return CSRequestToJoinRoomMultiError(errors)
	}

	return nil
}

// CSRequestToJoinRoomMultiError is an error wrapping multiple validation
// errors returned by CSRequestToJoinRoom.ValidateAll() if the designated
// constraints aren't met.
type CSRequestToJoinRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSRequestToJoinRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSRequestToJoinRoomMultiError) AllErrors() []error { return m }

// CSRequestToJoinRoomValidationError is the validation error returned by
// CSRequestToJoinRoom.Validate if the designated constraints aren't met.
type CSRequestToJoinRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSRequestToJoinRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSRequestToJoinRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSRequestToJoinRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSRequestToJoinRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSRequestToJoinRoomValidationError) ErrorName() string {
	return "CSRequestToJoinRoomValidationError"
}

// Error satisfies the builtin error interface
func (e CSRequestToJoinRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSRequestToJoinRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSRequestToJoinRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSRequestToJoinRoomValidationError{}

// Validate checks the field values on SCRequestToJoinRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SCRequestToJoinRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCRequestToJoinRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SCRequestToJoinRoomMultiError, or nil if none found.
func (m *SCRequestToJoinRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *SCRequestToJoinRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SCRequestToJoinRoomMultiError(errors)
	}

	return nil
}

// SCRequestToJoinRoomMultiError is an error wrapping multiple validation
// errors returned by SCRequestToJoinRoom.ValidateAll() if the designated
// constraints aren't met.
type SCRequestToJoinRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCRequestToJoinRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCRequestToJoinRoomMultiError) AllErrors() []error { return m }

// SCRequestToJoinRoomValidationError is the validation error returned by
// SCRequestToJoinRoom.Validate if the designated constraints aren't met.
type SCRequestToJoinRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCRequestToJoinRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCRequestToJoinRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCRequestToJoinRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCRequestToJoinRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCRequestToJoinRoomValidationError) ErrorName() string {
	return "SCRequestToJoinRoomValidationError"
}

// Error satisfies the builtin error interface
func (e SCRequestToJoinRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCRequestToJoinRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCRequestToJoinRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCRequestToJoinRoomValidationError{}

// Validate checks the field values on CSApproveRequestToJoinRoom with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CSApproveRequestToJoinRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSApproveRequestToJoinRoom with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CSApproveRequestToJoinRoomMultiError, or nil if none found.
func (m *CSApproveRequestToJoinRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *CSApproveRequestToJoinRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CSApproveRequestToJoinRoomMultiError(errors)
	}

	return nil
}

// CSApproveRequestToJoinRoomMultiError is an error wrapping multiple
// validation errors returned by CSApproveRequestToJoinRoom.ValidateAll() if
// the designated constraints aren't met.
type CSApproveRequestToJoinRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSApproveRequestToJoinRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSApproveRequestToJoinRoomMultiError) AllErrors() []error { return m }

// CSApproveRequestToJoinRoomValidationError is the validation error returned
// by CSApproveRequestToJoinRoom.Validate if the designated constraints aren't met.
type CSApproveRequestToJoinRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSApproveRequestToJoinRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSApproveRequestToJoinRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSApproveRequestToJoinRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSApproveRequestToJoinRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSApproveRequestToJoinRoomValidationError) ErrorName() string {
	return "CSApproveRequestToJoinRoomValidationError"
}

// Error satisfies the builtin error interface
func (e CSApproveRequestToJoinRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSApproveRequestToJoinRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSApproveRequestToJoinRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSApproveRequestToJoinRoomValidationError{}

// Validate checks the field values on SCApproveRequestToJoinRoom with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SCApproveRequestToJoinRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCApproveRequestToJoinRoom with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SCApproveRequestToJoinRoomMultiError, or nil if none found.
func (m *SCApproveRequestToJoinRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *SCApproveRequestToJoinRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SCApproveRequestToJoinRoomMultiError(errors)
	}

	return nil
}

// SCApproveRequestToJoinRoomMultiError is an error wrapping multiple
// validation errors returned by SCApproveRequestToJoinRoom.ValidateAll() if
// the designated constraints aren't met.
type SCApproveRequestToJoinRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCApproveRequestToJoinRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCApproveRequestToJoinRoomMultiError) AllErrors() []error { return m }

// SCApproveRequestToJoinRoomValidationError is the validation error returned
// by SCApproveRequestToJoinRoom.Validate if the designated constraints aren't met.
type SCApproveRequestToJoinRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCApproveRequestToJoinRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCApproveRequestToJoinRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCApproveRequestToJoinRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCApproveRequestToJoinRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCApproveRequestToJoinRoomValidationError) ErrorName() string {
	return "SCApproveRequestToJoinRoomValidationError"
}

// Error satisfies the builtin error interface
func (e SCApproveRequestToJoinRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCApproveRequestToJoinRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCApproveRequestToJoinRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCApproveRequestToJoinRoomValidationError{}

// Validate checks the field values on CSKickUserFromRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CSKickUserFromRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSKickUserFromRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CSKickUserFromRoomMultiError, or nil if none found.
func (m *CSKickUserFromRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *CSKickUserFromRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CSKickUserFromRoomMultiError(errors)
	}

	return nil
}

// CSKickUserFromRoomMultiError is an error wrapping multiple validation errors
// returned by CSKickUserFromRoom.ValidateAll() if the designated constraints
// aren't met.
type CSKickUserFromRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSKickUserFromRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSKickUserFromRoomMultiError) AllErrors() []error { return m }

// CSKickUserFromRoomValidationError is the validation error returned by
// CSKickUserFromRoom.Validate if the designated constraints aren't met.
type CSKickUserFromRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSKickUserFromRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSKickUserFromRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSKickUserFromRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSKickUserFromRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSKickUserFromRoomValidationError) ErrorName() string {
	return "CSKickUserFromRoomValidationError"
}

// Error satisfies the builtin error interface
func (e CSKickUserFromRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSKickUserFromRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSKickUserFromRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSKickUserFromRoomValidationError{}

// Validate checks the field values on SCKickUserFromRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SCKickUserFromRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCKickUserFromRoom with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SCKickUserFromRoomMultiError, or nil if none found.
func (m *SCKickUserFromRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *SCKickUserFromRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SCKickUserFromRoomMultiError(errors)
	}

	return nil
}

// SCKickUserFromRoomMultiError is an error wrapping multiple validation errors
// returned by SCKickUserFromRoom.ValidateAll() if the designated constraints
// aren't met.
type SCKickUserFromRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCKickUserFromRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCKickUserFromRoomMultiError) AllErrors() []error { return m }

// SCKickUserFromRoomValidationError is the validation error returned by
// SCKickUserFromRoom.Validate if the designated constraints aren't met.
type SCKickUserFromRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCKickUserFromRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCKickUserFromRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCKickUserFromRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCKickUserFromRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCKickUserFromRoomValidationError) ErrorName() string {
	return "SCKickUserFromRoomValidationError"
}

// Error satisfies the builtin error interface
func (e SCKickUserFromRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCKickUserFromRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCKickUserFromRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCKickUserFromRoomValidationError{}

// Validate checks the field values on CSLeaveRoom with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSLeaveRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSLeaveRoom with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSLeaveRoomMultiError, or
// nil if none found.
func (m *CSLeaveRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *CSLeaveRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return CSLeaveRoomMultiError(errors)
	}

	return nil
}

// CSLeaveRoomMultiError is an error wrapping multiple validation errors
// returned by CSLeaveRoom.ValidateAll() if the designated constraints aren't met.
type CSLeaveRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSLeaveRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSLeaveRoomMultiError) AllErrors() []error { return m }

// CSLeaveRoomValidationError is the validation error returned by
// CSLeaveRoom.Validate if the designated constraints aren't met.
type CSLeaveRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSLeaveRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSLeaveRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSLeaveRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSLeaveRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSLeaveRoomValidationError) ErrorName() string { return "CSLeaveRoomValidationError" }

// Error satisfies the builtin error interface
func (e CSLeaveRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSLeaveRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSLeaveRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSLeaveRoomValidationError{}

// Validate checks the field values on SCLeaveRoom with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCLeaveRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCLeaveRoom with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCLeaveRoomMultiError, or
// nil if none found.
func (m *SCLeaveRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *SCLeaveRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SCLeaveRoomMultiError(errors)
	}

	return nil
}

// SCLeaveRoomMultiError is an error wrapping multiple validation errors
// returned by SCLeaveRoom.ValidateAll() if the designated constraints aren't met.
type SCLeaveRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCLeaveRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCLeaveRoomMultiError) AllErrors() []error { return m }

// SCLeaveRoomValidationError is the validation error returned by
// SCLeaveRoom.Validate if the designated constraints aren't met.
type SCLeaveRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCLeaveRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCLeaveRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCLeaveRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCLeaveRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCLeaveRoomValidationError) ErrorName() string { return "SCLeaveRoomValidationError" }

// Error satisfies the builtin error interface
func (e SCLeaveRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCLeaveRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCLeaveRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCLeaveRoomValidationError{}

// Validate checks the field values on CSCloseRoom with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSCloseRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSCloseRoom with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSCloseRoomMultiError, or
// nil if none found.
func (m *CSCloseRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *CSCloseRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return CSCloseRoomMultiError(errors)
	}

	return nil
}

// CSCloseRoomMultiError is an error wrapping multiple validation errors
// returned by CSCloseRoom.ValidateAll() if the designated constraints aren't met.
type CSCloseRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSCloseRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSCloseRoomMultiError) AllErrors() []error { return m }

// CSCloseRoomValidationError is the validation error returned by
// CSCloseRoom.Validate if the designated constraints aren't met.
type CSCloseRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSCloseRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSCloseRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSCloseRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSCloseRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSCloseRoomValidationError) ErrorName() string { return "CSCloseRoomValidationError" }

// Error satisfies the builtin error interface
func (e CSCloseRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSCloseRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSCloseRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSCloseRoomValidationError{}

// Validate checks the field values on SCCloseRoom with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCCloseRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCCloseRoom with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCCloseRoomMultiError, or
// nil if none found.
func (m *SCCloseRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *SCCloseRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SCCloseRoomMultiError(errors)
	}

	return nil
}

// SCCloseRoomMultiError is an error wrapping multiple validation errors
// returned by SCCloseRoom.ValidateAll() if the designated constraints aren't met.
type SCCloseRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCCloseRoomMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCCloseRoomMultiError) AllErrors() []error { return m }

// SCCloseRoomValidationError is the validation error returned by
// SCCloseRoom.Validate if the designated constraints aren't met.
type SCCloseRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCCloseRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCCloseRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCCloseRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCCloseRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCCloseRoomValidationError) ErrorName() string { return "SCCloseRoomValidationError" }

// Error satisfies the builtin error interface
func (e SCCloseRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCCloseRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCCloseRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCCloseRoomValidationError{}
