syntax = "proto3";

package packet;

option go_package = "api/client/packet;clipkt";

// TCP packet structure definition
// For public network access
// The complete message format: 4(len, bigEndian) + encrypt(byte[](Marshal(Packet))). The client and server send messages in this format.
// After the handshake protocol, all protocols use AES encryption and decryption
// mod + seq + obj forms the unique ID of data
message Packet {
  int32 ver = 1; // Version
  int32 index = 2; // Message sequence number, increment
  bool compress = 3; // Whether the data in the body is compressed. The default compression method is zlib

  int32 mod = 4; // Module ID, globally unique
  int32 seq = 5; // Message ID within the module, unique within the module
  int64 obj = 6; // Module object ID, according to the business agreement to pass the corresponding object ID
  bytes data = 7; // Serialized bytes of the cs/sc protocol in the message. If the corresponding protocol specifies that the data needs to be cached on the client, use data_version to compare the data version number
  uint64 data_version = 8; // Data version number, default is 0. When greater than 0 and greater than the version of the same message (unique ID is the same), the data field is valid
}
