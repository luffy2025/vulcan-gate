// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message/storage.proto

package climsg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SCPushItemUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SCPushItemUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCPushItemUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SCPushItemUpdateMultiError, or nil if none found.
func (m *SCPushItemUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *SCPushItemUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Items

	if len(errors) > 0 {
		return SCPushItemUpdateMultiError(errors)
	}

	return nil
}

// SCPushItemUpdateMultiError is an error wrapping multiple validation errors
// returned by SCPushItemUpdate.ValidateAll() if the designated constraints
// aren't met.
type SCPushItemUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCPushItemUpdateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCPushItemUpdateMultiError) AllErrors() []error { return m }

// SCPushItemUpdateValidationError is the validation error returned by
// SCPushItemUpdate.Validate if the designated constraints aren't met.
type SCPushItemUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCPushItemUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCPushItemUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCPushItemUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCPushItemUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCPushItemUpdateValidationError) ErrorName() string { return "SCPushItemUpdateValidationError" }

// Error satisfies the builtin error interface
func (e SCPushItemUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCPushItemUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCPushItemUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCPushItemUpdateValidationError{}

// Validate checks the field values on CSUsePack with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CSUsePack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CSUsePack with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CSUsePackMultiError, or nil
// if none found.
func (m *CSUsePack) ValidateAll() error {
	return m.validate(true)
}

func (m *CSUsePack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CSUsePackMultiError(errors)
	}

	return nil
}

// CSUsePackMultiError is an error wrapping multiple validation errors returned
// by CSUsePack.ValidateAll() if the designated constraints aren't met.
type CSUsePackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CSUsePackMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CSUsePackMultiError) AllErrors() []error { return m }

// CSUsePackValidationError is the validation error returned by
// CSUsePack.Validate if the designated constraints aren't met.
type CSUsePackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CSUsePackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CSUsePackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CSUsePackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CSUsePackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CSUsePackValidationError) ErrorName() string { return "CSUsePackValidationError" }

// Error satisfies the builtin error interface
func (e CSUsePackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCSUsePack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CSUsePackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CSUsePackValidationError{}

// Validate checks the field values on SCUsePack with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SCUsePack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SCUsePack with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SCUsePackMultiError, or nil
// if none found.
func (m *SCUsePack) ValidateAll() error {
	return m.validate(true)
}

func (m *SCUsePack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Id

	// no validation rules for ChangedItems

	if len(errors) > 0 {
		return SCUsePackMultiError(errors)
	}

	return nil
}

// SCUsePackMultiError is an error wrapping multiple validation errors returned
// by SCUsePack.ValidateAll() if the designated constraints aren't met.
type SCUsePackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SCUsePackMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SCUsePackMultiError) AllErrors() []error { return m }

// SCUsePackValidationError is the validation error returned by
// SCUsePack.Validate if the designated constraints aren't met.
type SCUsePackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SCUsePackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SCUsePackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SCUsePackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SCUsePackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SCUsePackValidationError) ErrorName() string { return "SCUsePackValidationError" }

// Error satisfies the builtin error interface
func (e SCUsePackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSCUsePack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SCUsePackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SCUsePackValidationError{}

// Validate checks the field values on UserStorageProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserStorageProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserStorageProto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserStorageProtoMultiError, or nil if none found.
func (m *UserStorageProto) ValidateAll() error {
	return m.validate(true)
}

func (m *UserStorageProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amounts

	{
		sorted_keys := make([]int64, len(m.GetPacks()))
		i := 0
		for key := range m.GetPacks() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPacks()[key]
			_ = val

			// no validation rules for Packs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UserStorageProtoValidationError{
							field:  fmt.Sprintf("Packs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UserStorageProtoValidationError{
							field:  fmt.Sprintf("Packs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UserStorageProtoValidationError{
						field:  fmt.Sprintf("Packs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int64, len(m.GetRecoverableItems()))
		i := 0
		for key := range m.GetRecoverableItems() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRecoverableItems()[key]
			_ = val

			// no validation rules for RecoverableItems[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UserStorageProtoValidationError{
							field:  fmt.Sprintf("RecoverableItems[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UserStorageProtoValidationError{
							field:  fmt.Sprintf("RecoverableItems[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UserStorageProtoValidationError{
						field:  fmt.Sprintf("RecoverableItems[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return UserStorageProtoMultiError(errors)
	}

	return nil
}

// UserStorageProtoMultiError is an error wrapping multiple validation errors
// returned by UserStorageProto.ValidateAll() if the designated constraints
// aren't met.
type UserStorageProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserStorageProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserStorageProtoMultiError) AllErrors() []error { return m }

// UserStorageProtoValidationError is the validation error returned by
// UserStorageProto.Validate if the designated constraints aren't met.
type UserStorageProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStorageProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStorageProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStorageProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStorageProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStorageProtoValidationError) ErrorName() string { return "UserStorageProtoValidationError" }

// Error satisfies the builtin error interface
func (e UserStorageProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStorageProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStorageProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStorageProtoValidationError{}

// Validate checks the field values on ItemPackProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemPackProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemPackProto with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemPackProtoMultiError, or
// nil if none found.
func (m *ItemPackProto) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemPackProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataId

	// no validation rules for ReceivedAt

	if len(errors) > 0 {
		return ItemPackProtoMultiError(errors)
	}

	return nil
}

// ItemPackProtoMultiError is an error wrapping multiple validation errors
// returned by ItemPackProto.ValidateAll() if the designated constraints
// aren't met.
type ItemPackProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemPackProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemPackProtoMultiError) AllErrors() []error { return m }

// ItemPackProtoValidationError is the validation error returned by
// ItemPackProto.Validate if the designated constraints aren't met.
type ItemPackProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemPackProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemPackProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemPackProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemPackProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemPackProtoValidationError) ErrorName() string { return "ItemPackProtoValidationError" }

// Error satisfies the builtin error interface
func (e ItemPackProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemPackProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemPackProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemPackProtoValidationError{}

// Validate checks the field values on ItemRecoverableProto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ItemRecoverableProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemRecoverableProto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ItemRecoverableProtoMultiError, or nil if none found.
func (m *ItemRecoverableProto) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemRecoverableProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for Max

	// no validation rules for RecoverPerSecond

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ItemRecoverableProtoMultiError(errors)
	}

	return nil
}

// ItemRecoverableProtoMultiError is an error wrapping multiple validation
// errors returned by ItemRecoverableProto.ValidateAll() if the designated
// constraints aren't met.
type ItemRecoverableProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemRecoverableProtoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemRecoverableProtoMultiError) AllErrors() []error { return m }

// ItemRecoverableProtoValidationError is the validation error returned by
// ItemRecoverableProto.Validate if the designated constraints aren't met.
type ItemRecoverableProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemRecoverableProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemRecoverableProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemRecoverableProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemRecoverableProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemRecoverableProtoValidationError) ErrorName() string {
	return "ItemRecoverableProtoValidationError"
}

// Error satisfies the builtin error interface
func (e ItemRecoverableProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemRecoverableProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemRecoverableProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemRecoverableProtoValidationError{}
