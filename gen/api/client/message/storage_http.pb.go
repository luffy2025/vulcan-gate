// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: message/storage.proto

package climsg

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationStorageTCPServiceUsePack = "/message.StorageTCPService/UsePack"

type StorageTCPServiceHTTPServer interface {
	// UsePack Use pack
	UsePack(context.Context, *CSUsePack) (*SCUsePack, error)
}

func RegisterStorageTCPServiceHTTPServer(s *http.Server, srv StorageTCPServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/storage/use/pack", _StorageTCPService_UsePack0_HTTP_Handler(srv))
}

func _StorageTCPService_UsePack0_HTTP_Handler(srv StorageTCPServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CSUsePack
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationStorageTCPServiceUsePack)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UsePack(ctx, req.(*CSUsePack))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SCUsePack)
		return ctx.Result(200, reply)
	}
}

type StorageTCPServiceHTTPClient interface {
	UsePack(ctx context.Context, req *CSUsePack, opts ...http.CallOption) (rsp *SCUsePack, err error)
}

type StorageTCPServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewStorageTCPServiceHTTPClient(client *http.Client) StorageTCPServiceHTTPClient {
	return &StorageTCPServiceHTTPClientImpl{client}
}

func (c *StorageTCPServiceHTTPClientImpl) UsePack(ctx context.Context, in *CSUsePack, opts ...http.CallOption) (*SCUsePack, error) {
	var out SCUsePack
	pattern := "/storage/use/pack"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationStorageTCPServiceUsePack))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
