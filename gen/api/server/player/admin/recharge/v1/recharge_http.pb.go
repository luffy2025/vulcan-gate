// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: player/admin/recharge/v1/recharge.proto

package adminv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRechargeAdminServiceGetOrderById = "/player.admin.recharge.v1.RechargeAdminService/GetOrderById"
const OperationRechargeAdminServiceGetOrderList = "/player.admin.recharge.v1.RechargeAdminService/GetOrderList"
const OperationRechargeAdminServiceUpdateOrderAckStateById = "/player.admin.recharge.v1.RechargeAdminService/UpdateOrderAckStateById"

type RechargeAdminServiceHTTPServer interface {
	// GetOrderById Query order by id
	GetOrderById(context.Context, *GetOrderByIdRequest) (*GetOrderByIdResponse, error)
	// GetOrderList Query order list by page
	GetOrderList(context.Context, *GetOrderListRequest) (*GetOrderListResponse, error)
	// UpdateOrderAckStateById Update order confirmation status by id
	UpdateOrderAckStateById(context.Context, *UpdateOrderAckStateByIdRequest) (*UpdateOrderAckStateByIdResponse, error)
}

func RegisterRechargeAdminServiceHTTPServer(s *http.Server, srv RechargeAdminServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/order/list", _RechargeAdminService_GetOrderList0_HTTP_Handler(srv))
	r.GET("/admin/order/id", _RechargeAdminService_GetOrderById0_HTTP_Handler(srv))
	r.POST("/admin/order/ack/update", _RechargeAdminService_UpdateOrderAckStateById0_HTTP_Handler(srv))
}

func _RechargeAdminService_GetOrderList0_HTTP_Handler(srv RechargeAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRechargeAdminServiceGetOrderList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrderList(ctx, req.(*GetOrderListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrderListResponse)
		return ctx.Result(200, reply)
	}
}

func _RechargeAdminService_GetOrderById0_HTTP_Handler(srv RechargeAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRechargeAdminServiceGetOrderById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrderById(ctx, req.(*GetOrderByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrderByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _RechargeAdminService_UpdateOrderAckStateById0_HTTP_Handler(srv RechargeAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOrderAckStateByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRechargeAdminServiceUpdateOrderAckStateById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrderAckStateById(ctx, req.(*UpdateOrderAckStateByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOrderAckStateByIdResponse)
		return ctx.Result(200, reply)
	}
}

type RechargeAdminServiceHTTPClient interface {
	GetOrderById(ctx context.Context, req *GetOrderByIdRequest, opts ...http.CallOption) (rsp *GetOrderByIdResponse, err error)
	GetOrderList(ctx context.Context, req *GetOrderListRequest, opts ...http.CallOption) (rsp *GetOrderListResponse, err error)
	UpdateOrderAckStateById(ctx context.Context, req *UpdateOrderAckStateByIdRequest, opts ...http.CallOption) (rsp *UpdateOrderAckStateByIdResponse, err error)
}

type RechargeAdminServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRechargeAdminServiceHTTPClient(client *http.Client) RechargeAdminServiceHTTPClient {
	return &RechargeAdminServiceHTTPClientImpl{client}
}

func (c *RechargeAdminServiceHTTPClientImpl) GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...http.CallOption) (*GetOrderByIdResponse, error) {
	var out GetOrderByIdResponse
	pattern := "/admin/order/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRechargeAdminServiceGetOrderById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RechargeAdminServiceHTTPClientImpl) GetOrderList(ctx context.Context, in *GetOrderListRequest, opts ...http.CallOption) (*GetOrderListResponse, error) {
	var out GetOrderListResponse
	pattern := "/admin/order/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRechargeAdminServiceGetOrderList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RechargeAdminServiceHTTPClientImpl) UpdateOrderAckStateById(ctx context.Context, in *UpdateOrderAckStateByIdRequest, opts ...http.CallOption) (*UpdateOrderAckStateByIdResponse, error) {
	var out UpdateOrderAckStateByIdResponse
	pattern := "/admin/order/ack/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRechargeAdminServiceUpdateOrderAckStateById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
