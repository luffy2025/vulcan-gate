// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account/interface/v1/account.proto

package interfacev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DevPingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DevPingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevPingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DevPingRequestMultiError,
// or nil if none found.
func (m *DevPingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DevPingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DevPingRequestMultiError(errors)
	}

	return nil
}

// DevPingRequestMultiError is an error wrapping multiple validation errors
// returned by DevPingRequest.ValidateAll() if the designated constraints
// aren't met.
type DevPingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevPingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevPingRequestMultiError) AllErrors() []error { return m }

// DevPingRequestValidationError is the validation error returned by
// DevPingRequest.Validate if the designated constraints aren't met.
type DevPingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevPingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevPingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevPingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevPingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevPingRequestValidationError) ErrorName() string { return "DevPingRequestValidationError" }

// Error satisfies the builtin error interface
func (e DevPingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevPingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevPingRequestValidationError{}

// Validate checks the field values on DevPingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DevPingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevPingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DevPingResponseMultiError, or nil if none found.
func (m *DevPingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DevPingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Time

	if len(errors) > 0 {
		return DevPingResponseMultiError(errors)
	}

	return nil
}

// DevPingResponseMultiError is an error wrapping multiple validation errors
// returned by DevPingResponse.ValidateAll() if the designated constraints
// aren't met.
type DevPingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevPingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevPingResponseMultiError) AllErrors() []error { return m }

// DevPingResponseValidationError is the validation error returned by
// DevPingResponse.Validate if the designated constraints aren't met.
type DevPingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevPingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevPingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevPingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevPingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevPingResponseValidationError) ErrorName() string { return "DevPingResponseValidationError" }

// Error satisfies the builtin error interface
func (e DevPingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevPingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevPingResponseValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Password

	// no validation rules for Color

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for AccountId

	// no validation rules for Session

	// no validation rules for SessionTimeout

	// no validation rules for Token

	// no validation rules for TokenTimeout

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Password

	// no validation rules for Color

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for AccountId

	// no validation rules for Session

	// no validation rules for SessionTimeout

	// no validation rules for Token

	// no validation rules for TokenTimeout

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on RefreshRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefreshRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefreshRequestMultiError,
// or nil if none found.
func (m *RefreshRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Session

	if len(errors) > 0 {
		return RefreshRequestMultiError(errors)
	}

	return nil
}

// RefreshRequestMultiError is an error wrapping multiple validation errors
// returned by RefreshRequest.ValidateAll() if the designated constraints
// aren't met.
type RefreshRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshRequestMultiError) AllErrors() []error { return m }

// RefreshRequestValidationError is the validation error returned by
// RefreshRequest.Validate if the designated constraints aren't met.
type RefreshRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshRequestValidationError) ErrorName() string { return "RefreshRequestValidationError" }

// Error satisfies the builtin error interface
func (e RefreshRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshRequestValidationError{}

// Validate checks the field values on RefreshResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshResponseMultiError, or nil if none found.
func (m *RefreshResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Session

	// no validation rules for SessionTimeout

	if len(errors) > 0 {
		return RefreshResponseMultiError(errors)
	}

	return nil
}

// RefreshResponseMultiError is an error wrapping multiple validation errors
// returned by RefreshResponse.ValidateAll() if the designated constraints
// aren't met.
type RefreshResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshResponseMultiError) AllErrors() []error { return m }

// RefreshResponseValidationError is the validation error returned by
// RefreshResponse.Validate if the designated constraints aren't met.
type RefreshResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshResponseValidationError) ErrorName() string { return "RefreshResponseValidationError" }

// Error satisfies the builtin error interface
func (e RefreshResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshResponseValidationError{}

// Validate checks the field values on TokenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenRequestMultiError, or
// nil if none found.
func (m *TokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Session

	// no validation rules for Color

	if len(errors) > 0 {
		return TokenRequestMultiError(errors)
	}

	return nil
}

// TokenRequestMultiError is an error wrapping multiple validation errors
// returned by TokenRequest.ValidateAll() if the designated constraints aren't met.
type TokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenRequestMultiError) AllErrors() []error { return m }

// TokenRequestValidationError is the validation error returned by
// TokenRequest.Validate if the designated constraints aren't met.
type TokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenRequestValidationError) ErrorName() string { return "TokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e TokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenRequestValidationError{}

// Validate checks the field values on TokenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenResponseMultiError, or
// nil if none found.
func (m *TokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Token

	// no validation rules for TokenTimeout

	// no validation rules for Session

	// no validation rules for SessionTimeout

	if len(errors) > 0 {
		return TokenResponseMultiError(errors)
	}

	return nil
}

// TokenResponseMultiError is an error wrapping multiple validation errors
// returned by TokenResponse.ValidateAll() if the designated constraints
// aren't met.
type TokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenResponseMultiError) AllErrors() []error { return m }

// TokenResponseValidationError is the validation error returned by
// TokenResponse.Validate if the designated constraints aren't met.
type TokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenResponseValidationError) ErrorName() string { return "TokenResponseValidationError" }

// Error satisfies the builtin error interface
func (e TokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenResponseValidationError{}

// Validate checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Session) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SessionMultiError, or nil if none found.
func (m *Session) ValidateAll() error {
	return m.validate(true)
}

func (m *Session) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Timeout

	// no validation rules for Key

	if len(errors) > 0 {
		return SessionMultiError(errors)
	}

	return nil
}

// SessionMultiError is an error wrapping multiple validation errors returned
// by Session.ValidateAll() if the designated constraints aren't met.
type SessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionMultiError) AllErrors() []error { return m }

// SessionValidationError is the validation error returned by Session.Validate
// if the designated constraints aren't met.
type SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionValidationError) ErrorName() string { return "SessionValidationError" }

// Error satisfies the builtin error interface
func (e SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionValidationError{}

// Validate checks the field values on AppleLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppleLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppleLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppleLoginRequestMultiError, or nil if none found.
func (m *AppleLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppleLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for AppleId

	// no validation rules for Code

	// no validation rules for Color

	if len(errors) > 0 {
		return AppleLoginRequestMultiError(errors)
	}

	return nil
}

// AppleLoginRequestMultiError is an error wrapping multiple validation errors
// returned by AppleLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type AppleLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppleLoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppleLoginRequestMultiError) AllErrors() []error { return m }

// AppleLoginRequestValidationError is the validation error returned by
// AppleLoginRequest.Validate if the designated constraints aren't met.
type AppleLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppleLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppleLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppleLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppleLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppleLoginRequestValidationError) ErrorName() string {
	return "AppleLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AppleLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppleLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppleLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppleLoginRequestValidationError{}

// Validate checks the field values on AppleLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppleLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppleLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppleLoginResponseMultiError, or nil if none found.
func (m *AppleLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AppleLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppleLoginResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppleLoginResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppleLoginResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppleLoginResponseMultiError(errors)
	}

	return nil
}

// AppleLoginResponseMultiError is an error wrapping multiple validation errors
// returned by AppleLoginResponse.ValidateAll() if the designated constraints
// aren't met.
type AppleLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppleLoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppleLoginResponseMultiError) AllErrors() []error { return m }

// AppleLoginResponseValidationError is the validation error returned by
// AppleLoginResponse.Validate if the designated constraints aren't met.
type AppleLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppleLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppleLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppleLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppleLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppleLoginResponseValidationError) ErrorName() string {
	return "AppleLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AppleLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppleLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppleLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppleLoginResponseValidationError{}

// Validate checks the field values on AppleLoginCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppleLoginCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppleLoginCallbackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppleLoginCallbackRequestMultiError, or nil if none found.
func (m *AppleLoginCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppleLoginCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for IdToken

	// no validation rules for State

	// no validation rules for User

	// no validation rules for Error

	if len(errors) > 0 {
		return AppleLoginCallbackRequestMultiError(errors)
	}

	return nil
}

// AppleLoginCallbackRequestMultiError is an error wrapping multiple validation
// errors returned by AppleLoginCallbackRequest.ValidateAll() if the
// designated constraints aren't met.
type AppleLoginCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppleLoginCallbackRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppleLoginCallbackRequestMultiError) AllErrors() []error { return m }

// AppleLoginCallbackRequestValidationError is the validation error returned by
// AppleLoginCallbackRequest.Validate if the designated constraints aren't met.
type AppleLoginCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppleLoginCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppleLoginCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppleLoginCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppleLoginCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppleLoginCallbackRequestValidationError) ErrorName() string {
	return "AppleLoginCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AppleLoginCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppleLoginCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppleLoginCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppleLoginCallbackRequestValidationError{}

// Validate checks the field values on AppleLoginCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppleLoginCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppleLoginCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppleLoginCallbackResponseMultiError, or nil if none found.
func (m *AppleLoginCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AppleLoginCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return AppleLoginCallbackResponseMultiError(errors)
	}

	return nil
}

// AppleLoginCallbackResponseMultiError is an error wrapping multiple
// validation errors returned by AppleLoginCallbackResponse.ValidateAll() if
// the designated constraints aren't met.
type AppleLoginCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppleLoginCallbackResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppleLoginCallbackResponseMultiError) AllErrors() []error { return m }

// AppleLoginCallbackResponseValidationError is the validation error returned
// by AppleLoginCallbackResponse.Validate if the designated constraints aren't met.
type AppleLoginCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppleLoginCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppleLoginCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppleLoginCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppleLoginCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppleLoginCallbackResponseValidationError) ErrorName() string {
	return "AppleLoginCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AppleLoginCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppleLoginCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppleLoginCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppleLoginCallbackResponseValidationError{}

// Validate checks the field values on GoogleLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GoogleLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoogleLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoogleLoginRequestMultiError, or nil if none found.
func (m *GoogleLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GoogleLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Color

	if len(errors) > 0 {
		return GoogleLoginRequestMultiError(errors)
	}

	return nil
}

// GoogleLoginRequestMultiError is an error wrapping multiple validation errors
// returned by GoogleLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type GoogleLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoogleLoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoogleLoginRequestMultiError) AllErrors() []error { return m }

// GoogleLoginRequestValidationError is the validation error returned by
// GoogleLoginRequest.Validate if the designated constraints aren't met.
type GoogleLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoogleLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoogleLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoogleLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoogleLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoogleLoginRequestValidationError) ErrorName() string {
	return "GoogleLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GoogleLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoogleLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoogleLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoogleLoginRequestValidationError{}

// Validate checks the field values on GoogleLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GoogleLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoogleLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoogleLoginResponseMultiError, or nil if none found.
func (m *GoogleLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GoogleLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GoogleLoginResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GoogleLoginResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GoogleLoginResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GoogleLoginResponseMultiError(errors)
	}

	return nil
}

// GoogleLoginResponseMultiError is an error wrapping multiple validation
// errors returned by GoogleLoginResponse.ValidateAll() if the designated
// constraints aren't met.
type GoogleLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoogleLoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoogleLoginResponseMultiError) AllErrors() []error { return m }

// GoogleLoginResponseValidationError is the validation error returned by
// GoogleLoginResponse.Validate if the designated constraints aren't met.
type GoogleLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoogleLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoogleLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoogleLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoogleLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoogleLoginResponseValidationError) ErrorName() string {
	return "GoogleLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GoogleLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoogleLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoogleLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoogleLoginResponseValidationError{}

// Validate checks the field values on FacebookLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FacebookLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FacebookLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FacebookLoginRequestMultiError, or nil if none found.
func (m *FacebookLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FacebookLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Color

	if len(errors) > 0 {
		return FacebookLoginRequestMultiError(errors)
	}

	return nil
}

// FacebookLoginRequestMultiError is an error wrapping multiple validation
// errors returned by FacebookLoginRequest.ValidateAll() if the designated
// constraints aren't met.
type FacebookLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FacebookLoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FacebookLoginRequestMultiError) AllErrors() []error { return m }

// FacebookLoginRequestValidationError is the validation error returned by
// FacebookLoginRequest.Validate if the designated constraints aren't met.
type FacebookLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FacebookLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FacebookLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FacebookLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FacebookLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FacebookLoginRequestValidationError) ErrorName() string {
	return "FacebookLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FacebookLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFacebookLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FacebookLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FacebookLoginRequestValidationError{}

// Validate checks the field values on FacebookLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FacebookLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FacebookLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FacebookLoginResponseMultiError, or nil if none found.
func (m *FacebookLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FacebookLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FacebookLoginResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FacebookLoginResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FacebookLoginResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FacebookLoginResponseMultiError(errors)
	}

	return nil
}

// FacebookLoginResponseMultiError is an error wrapping multiple validation
// errors returned by FacebookLoginResponse.ValidateAll() if the designated
// constraints aren't met.
type FacebookLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FacebookLoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FacebookLoginResponseMultiError) AllErrors() []error { return m }

// FacebookLoginResponseValidationError is the validation error returned by
// FacebookLoginResponse.Validate if the designated constraints aren't met.
type FacebookLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FacebookLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FacebookLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FacebookLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FacebookLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FacebookLoginResponseValidationError) ErrorName() string {
	return "FacebookLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FacebookLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFacebookLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FacebookLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FacebookLoginResponseValidationError{}

// Validate checks the field values on AppleId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppleId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppleId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppleIdMultiError, or nil if none found.
func (m *AppleId) ValidateAll() error {
	return m.validate(true)
}

func (m *AppleId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppleId

	// no validation rules for State

	// no validation rules for T

	if len(errors) > 0 {
		return AppleIdMultiError(errors)
	}

	return nil
}

// AppleIdMultiError is an error wrapping multiple validation errors returned
// by AppleId.ValidateAll() if the designated constraints aren't met.
type AppleIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppleIdMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppleIdMultiError) AllErrors() []error { return m }

// AppleIdValidationError is the validation error returned by AppleId.Validate
// if the designated constraints aren't met.
type AppleIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppleIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppleIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppleIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppleIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppleIdValidationError) ErrorName() string { return "AppleIdValidationError" }

// Error satisfies the builtin error interface
func (e AppleIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppleId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppleIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppleIdValidationError{}

// Validate checks the field values on LoginInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginInfoMultiError, or nil
// if none found.
func (m *LoginInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Register

	// no validation rules for Token

	// no validation rules for TokenTimeout

	// no validation rules for Session

	// no validation rules for SessionTimeout

	// no validation rules for State

	if len(errors) > 0 {
		return LoginInfoMultiError(errors)
	}

	return nil
}

// LoginInfoMultiError is an error wrapping multiple validation errors returned
// by LoginInfo.ValidateAll() if the designated constraints aren't met.
type LoginInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginInfoMultiError) AllErrors() []error { return m }

// LoginInfoValidationError is the validation error returned by
// LoginInfo.Validate if the designated constraints aren't met.
type LoginInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginInfoValidationError) ErrorName() string { return "LoginInfoValidationError" }

// Error satisfies the builtin error interface
func (e LoginInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginInfoValidationError{}

// Validate checks the field values on AppleLoginCallbackRequest_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AppleLoginCallbackRequest_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppleLoginCallbackRequest_User with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AppleLoginCallbackRequest_UserMultiError, or nil if none found.
func (m *AppleLoginCallbackRequest_User) ValidateAll() error {
	return m.validate(true)
}

func (m *AppleLoginCallbackRequest_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppleLoginCallbackRequest_UserValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppleLoginCallbackRequest_UserValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppleLoginCallbackRequest_UserValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppleLoginCallbackRequest_UserMultiError(errors)
	}

	return nil
}

// AppleLoginCallbackRequest_UserMultiError is an error wrapping multiple
// validation errors returned by AppleLoginCallbackRequest_User.ValidateAll()
// if the designated constraints aren't met.
type AppleLoginCallbackRequest_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppleLoginCallbackRequest_UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppleLoginCallbackRequest_UserMultiError) AllErrors() []error { return m }

// AppleLoginCallbackRequest_UserValidationError is the validation error
// returned by AppleLoginCallbackRequest_User.Validate if the designated
// constraints aren't met.
type AppleLoginCallbackRequest_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppleLoginCallbackRequest_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppleLoginCallbackRequest_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppleLoginCallbackRequest_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppleLoginCallbackRequest_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppleLoginCallbackRequest_UserValidationError) ErrorName() string {
	return "AppleLoginCallbackRequest_UserValidationError"
}

// Error satisfies the builtin error interface
func (e AppleLoginCallbackRequest_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppleLoginCallbackRequest_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppleLoginCallbackRequest_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppleLoginCallbackRequest_UserValidationError{}

// Validate checks the field values on AppleLoginCallbackRequest_User_Name with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AppleLoginCallbackRequest_User_Name) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppleLoginCallbackRequest_User_Name
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AppleLoginCallbackRequest_User_NameMultiError, or nil if none found.
func (m *AppleLoginCallbackRequest_User_Name) ValidateAll() error {
	return m.validate(true)
}

func (m *AppleLoginCallbackRequest_User_Name) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirstName

	// no validation rules for LastName

	if len(errors) > 0 {
		return AppleLoginCallbackRequest_User_NameMultiError(errors)
	}

	return nil
}

// AppleLoginCallbackRequest_User_NameMultiError is an error wrapping multiple
// validation errors returned by
// AppleLoginCallbackRequest_User_Name.ValidateAll() if the designated
// constraints aren't met.
type AppleLoginCallbackRequest_User_NameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppleLoginCallbackRequest_User_NameMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppleLoginCallbackRequest_User_NameMultiError) AllErrors() []error { return m }

// AppleLoginCallbackRequest_User_NameValidationError is the validation error
// returned by AppleLoginCallbackRequest_User_Name.Validate if the designated
// constraints aren't met.
type AppleLoginCallbackRequest_User_NameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppleLoginCallbackRequest_User_NameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppleLoginCallbackRequest_User_NameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppleLoginCallbackRequest_User_NameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppleLoginCallbackRequest_User_NameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppleLoginCallbackRequest_User_NameValidationError) ErrorName() string {
	return "AppleLoginCallbackRequest_User_NameValidationError"
}

// Error satisfies the builtin error interface
func (e AppleLoginCallbackRequest_User_NameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppleLoginCallbackRequest_User_Name.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppleLoginCallbackRequest_User_NameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppleLoginCallbackRequest_User_NameValidationError{}
