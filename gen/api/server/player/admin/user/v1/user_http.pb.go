// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             (unknown)
// source: player/admin/user/v1/user.proto

package adminv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserAdminGetById = "/player.admin.user.v1.UserAdmin/GetById"
const OperationUserAdminUserList = "/player.admin.user.v1.UserAdmin/UserList"

type UserAdminHTTPServer interface {
	// GetById Query player by id
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	// UserList Query player list by page
	UserList(context.Context, *UserListRequest) (*UserListResponse, error)
}

func RegisterUserAdminHTTPServer(s *http.Server, srv UserAdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/user/list", _UserAdmin_UserList0_HTTP_Handler(srv))
	r.GET("/admin/user/id", _UserAdmin_GetById0_HTTP_Handler(srv))
}

func _UserAdmin_UserList0_HTTP_Handler(srv UserAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAdminUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserList(ctx, req.(*UserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserListResponse)
		return ctx.Result(200, reply)
	}
}

func _UserAdmin_GetById0_HTTP_Handler(srv UserAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAdminGetById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetById(ctx, req.(*GetByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetByIdResponse)
		return ctx.Result(200, reply)
	}
}

type UserAdminHTTPClient interface {
	GetById(ctx context.Context, req *GetByIdRequest, opts ...http.CallOption) (rsp *GetByIdResponse, err error)
	UserList(ctx context.Context, req *UserListRequest, opts ...http.CallOption) (rsp *UserListResponse, err error)
}

type UserAdminHTTPClientImpl struct {
	cc *http.Client
}

func NewUserAdminHTTPClient(client *http.Client) UserAdminHTTPClient {
	return &UserAdminHTTPClientImpl{client}
}

func (c *UserAdminHTTPClientImpl) GetById(ctx context.Context, in *GetByIdRequest, opts ...http.CallOption) (*GetByIdResponse, error) {
	var out GetByIdResponse
	pattern := "/admin/user/id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserAdminGetById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAdminHTTPClientImpl) UserList(ctx context.Context, in *UserListRequest, opts ...http.CallOption) (*UserListResponse, error) {
	var out UserListResponse
	pattern := "/admin/user/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserAdminUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
